#!/bin/bash
set -euo pipefail
set -x

DEPDIR=$(pwd)


# --- config ---
OUTPUT_DIR="$(pwd)"

while [ $# -gt 1 ]; do
  case "$1" in
    --ffi)
      MIXED_LANGUAGE=true
      shift
      ;;
    *)
      echo "Unknown argument: $1"
      exit 1
      ;;
  esac
done

if [ "$#" -lt 1 ]; then
	echo "Target Cargo Project not supplied. Exiting"
	exit 1
fi

TARGET_RUST_PROJECT=$1

cd "$TARGET_RUST_PROJECT"

CRATE=$(grep -m1 '^name\s*=' Cargo.toml | sed -E 's/name\s*=\s*"([^"]+)".*/\1/')
CRATE=$(printf '%s' "$CRATE" | tr '-' '_')
echo "$CRATE"

#cargo clean

RUSTFLAGS="--emit=llvm-bc,llvm-ir \
-Zpanic_abort_tests \
-C codegen-units=1 \
-C embed-bitcode=yes \
-C overflow-checks=off \
-C target-feature=-avx2 \
-C no-vectorize-slp \
-C no-vectorize-loops \
-C prefer-dynamic=no \
-C lto=no \
-C opt-level=3 \
-C debuginfo=2 \
-C llvm-args=--inline-threshold=9000 \
-C llvm-args=--bpf-expand-memcpy-in-order \
-C no-prepopulate-passes \
-C passes=ipsccp \
-C passes=globalopt \
-C passes=reassociate \
-C passes=argpromotion \
-C passes=typepromotion \
-C passes=lower-constant-intrinsics \
-C passes=memcpyopt \
-Z mir-opt-level=0 \
--target=x86_64-unknown-linux-gnu" \
rustup run RustMC cargo test --workspace --no-run


#RUSTFLAGS="-C codegen-units=1 -C embed-bitcode=yes --emit=llvm-bc,llvm-ir" \
#rustup run RustMC cargo test --lib --no-run

cd target/debug/deps
rm -f *no-opt*

# Collect dependency IR from rlibs as .ll
TMP_BC_DIR="$(mktemp -d)"
TMP_LL_DIR="$(mktemp -d)"

# Extract .bc from .rlib and disassemble to .ll
find . -maxdepth 1 -type f -name 'lib*.rlib' -print0 | while IFS= read -r -d '' A; do
  ( "llvm-ar-18" t "$A" | grep -F ".bc" || true ) | while read -r M; do
    mkdir -p "$TMP_BC_DIR/$(basename "$A" .rlib)" "$TMP_LL_DIR/$(basename "$A" .rlib)"
    "llvm-ar-18" x "$A" "$M"
    mv -f "$M" "$TMP_BC_DIR/$(basename "$A" .rlib)/"
    # disassemble to .ll
    for bc in "$TMP_BC_DIR/$(basename "$A" .rlib)/"*.bc; do
      [ -e "$bc" ] || continue
      base="$(basename "$bc" .bc)"
      "llvm-dis-18" "$bc" -o "$TMP_LL_DIR/$(basename "$A" .rlib)/$base.ll"
    done
  done
done

# 2) .llvmbc sections from .o -> .ll
find . -maxdepth 1 -type f -name 'lib*.rlib' -print0 | while IFS= read -r -d '' A; do
  ( "llvm-ar-18" t "$A" | grep -F ".o" || true ) | while read -r O; do
    mkdir -p "$TMP_BC_DIR/$(basename "$A" .rlib)" "$TMP_LL_DIR/$(basename "$A" .rlib)"
    "llvm-ar-18" x "$A" "$O"
    OUTBC="$TMP_BC_DIR/$(basename "$A" .rlib)/$(basename "$A" .rlib).$O.bc"
    "llvm-objcopy-18" --dump-section .llvmbc="$OUTBC" "$O" 2>/dev/null || true
    rm -f "$O"
    if [ -s "$OUTBC" ]; then
      "llvm-dis-18" "$OUTBC" -o "$TMP_LL_DIR/$(basename "$A" .rlib)/$(basename "$OUTBC" .bc).ll"
    fi
  done
done

mapfile -t deps < "$DEPDIR/integration_test_files.txt"

HARNESS_LL=()
for d in "${deps[@]}"; do
    # Extract just the filename without path and extension
    base_name=$(basename "$d" .rs)
    # Find matching test files in target/debug/deps
    HARNESS_LL+=( "./${base_name}-"*.ll )
done

# Link all .ll (tests + crate CGUs + dep IR) into one .ll
shopt -s nullglob
echo "HARNESS!!"
printf '%q\n' "${HARNESS_LL[@]}"

CRATE_CGUS_LL=( "./${CRATE}-"*.rcgu.ll )      # optional, same crate CGUs
DEPS_LL=( "$TMP_LL_DIR"/*/*.ll )

# Use only your crateâ€™s harness + its CGUs + deps
"llvm-link-18" -S -o "$OUTPUT_DIR/$CRATE.whole.linked.ll" \
  "${HARNESS_LL[@]}" "${CRATE_CGUS_LL[@]}" "${DEPS_LL[@]}"

# Optional .bc too
"llvm-link-18" -o "$OUTPUT_DIR/$CRATE.whole.linked.bc" \
  "${HARNESS_LL[@]}" "${CRATE_CGUS_LL[@]}" "${DEPS_LL[@]}"

echo "Wrote:"
echo "  ${OUTPUT_DIR}/${CRATE}.whole.linked.ll"
echo "  ${OUTPUT_DIR}/${CRATE}.whole.linked.bc"


echo "output dir is: $OUTPUT_DIR"

cp "$OUTPUT_DIR/$CRATE.whole.linked.ll" "$DEPDIR/combined_old.ll"
cp "$OUTPUT_DIR/$CRATE.whole.linked.bc" "$DEPDIR/combined_old.bc"