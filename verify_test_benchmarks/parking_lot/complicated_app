#!/bin/bash
set -x

OUTPUT_DIR="$(pwd)"
LLVM_HOME=/usr/lib/llvm-18
RUSTUP_TOOLCHAIN_LIB=/home/ollie/.rustup/toolchains/RustMC/lib
CRATE=parking_lot

# Ensure deps embed BC for extraction

cargo clean


RUSTFLAGS="-C save-temps --emit=llvm-ir" \
rustup run RustMC cargo test -p "$CRATE" --no-run

cd target/debug/deps

rm -f *no-opt*

# Align DI flag spelling
find . -name '*.ll' -print0 | xargs -0 -n1 sed -i -e 's/DIFlagFixedEnum/DIFlagEnumClass/g'

# Assemble IR -> BC for all .ll
find . -name '*.ll' -print0 | xargs -0 -n1 "$LLVM_HOME/bin/llvm-as"

# Collect dependency bitcode from rlibs into a temp dir
TMP_BC_DIR="$(mktemp -d)"
# 1) Extract standalone .bc members from rlibs
find . -maxdepth 1 -type f -name 'lib*.rlib' -print0 | while IFS= read -r -d '' A; do
  "$LLVM_HOME/bin/llvm-ar" t "$A" | grep -F ".bc" | while read -r M; do
    mkdir -p "$TMP_BC_DIR/$(basename "$A" .rlib)"
    "$LLVM_HOME/bin/llvm-ar" x "$A" "$M"
    # move and uniquify
    mv -f "$M" "$TMP_BC_DIR/$(basename "$A" .rlib)/$(basename "$A" .rlib).$M"
  done
done

# 2) Extract embedded .llvmbc from .o members when present
find . -maxdepth 1 -type f -name 'lib*.rlib' -print0 | while IFS= read -r -d '' A; do
  "$LLVM_HOME/bin/llvm-ar" t "$A" | grep -F ".o" | while read -r O; do
    mkdir -p "$TMP_BC_DIR/$(basename "$A" .rlib)"
    "$LLVM_HOME/bin/llvm-ar" x "$A" "$O"
    "$LLVM_HOME/bin/llvm-objcopy" --dump-section .llvmbc="$TMP_BC_DIR/$(basename "$A" .rlib)/$(basename "$A" .rlib).$O.bc" "$O" 2>/dev/null || true
    rm -f "$O"
  done
done

# Link crate CGU BC + any extracted dep BC into one module
"$LLVM_HOME/bin/llvm-link" -o "$OUTPUT_DIR/$CRATE.whole.linked.bc" ./"$CRATE"-*.rcgu.bc "$TMP_BC_DIR"/*/*.bc 2>/dev/null || \
"$LLVM_HOME/bin/llvm-link" -o "$OUTPUT_DIR/$CRATE.whole.linked.bc" ./"$CRATE"-*.rcgu.bc

# Human-readable IR
"$LLVM_HOME/bin/llvm-dis" -o "$OUTPUT_DIR/$CRATE.whole.linked.ll" "$OUTPUT_DIR/$CRATE.whole.linked.bc"

# Objects for shared library
find . -name '*.rcgu.ll' -print0 | xargs -0 -n1 "$LLVM_HOME/bin/llc" -relocation-model=pic -filetype=obj

# Build shared object (exclude the crateâ€™s own rlib)
cc -shared -m64 -Wl,--gc-sections -L "$RUSTUP_TOOLCHAIN_LIB" \
  *.rcgu.o \
  $(find . -maxdepth 1 -type f -name 'lib*.rlib' ! -name "lib$CRATE-*.rlib" -printf './%f ') \
  $(find "$RUSTUP_TOOLCHAIN_LIB" -type f -name '*.rlib' -print) \
  -o "$OUTPUT_DIR/libparking_instrumented.so"