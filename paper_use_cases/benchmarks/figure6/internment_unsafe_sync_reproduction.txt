GenMC v0.10.1 (LLVM 18.1.7)
Copyright (C) 2024 MPI-SWS. All rights reserved.

*** Compilation complete.
*** Transformation complete.
Error: Non-atomic race!
Event (1, 409) conflicts with event (0, 2399) in graph:
<-1, 0> main:
	(0, 1): MALLOC _0.i100
	(0, 2): Wna (, 0x0)
	(0, 3): MALLOC _13.i90
	(0, 4): Wna (, 0x0)
	(0, 5): MALLOC layout.i91
	(0, 6): Wna (, 0x0)
	(0, 7): Wna (, 0x0)
	(0, 8): MALLOC _13.i
	(0, 9): Wna (, 0x0)
	(0, 10): MALLOC layout.i
	(0, 11): Wna (, 0x0)
	(0, 12): Wna (, 0x0)
	(0, 13): MALLOC 
	(0, 14): Wna (, 0x0)
	(0, 15): MALLOC 
	(0, 16): Wna (, 0x0)
	(0, 17): MALLOC 
	(0, 18): Wna (, 0x0)
	(0, 19): MALLOC dst.dbg.spill.i.i49
	(0, 20): Wna (, 0x0)
	(0, 21): MALLOC self.dbg.spill15.i.i50
	(0, 22): Wna (, 0x0)
	(0, 23): MALLOC inner.dbg.spill14.i.i51
	(0, 24): Wna (, 0x0)
	(0, 25): MALLOC inner.dbg.spill.i.i52
	(0, 26): Wna (, 0x0)
	(0, 27): MALLOC self.dbg.spill12.i.i53
	(0, 28): Wna (, 0x0)
	(0, 29): MALLOC ptr.dbg.spill11.i.i54
	(0, 30): Wna (, 0x0)
	(0, 31): MALLOC ptr.dbg.spill.i.i55
	(0, 32): Wna (, 0x0)
	(0, 33): MALLOC self.dbg.spill10.i.i56
	(0, 34): Wna (, 0x0)
	(0, 35): MALLOC self.dbg.spill.i.i57
	(0, 36): Wna (, 0x0)
	(0, 37): MALLOC _2.i.i58
	(0, 38): Wna (, 0x0)
	(0, 39): Wna (, 0x0)
	(0, 40): MALLOC force_no_backtrace.dbg.spill6.i.i59
	(0, 41): MALLOC can_unwind.dbg.spill5.i.i60
	(0, 42): MALLOC pieces.dbg.spill4.i.i61
	(0, 43): Wna (, 0x0)
	(0, 44): MALLOC force_no_backtrace.dbg.spill.i.i62
	(0, 45): MALLOC can_unwind.dbg.spill.i.i63
	(0, 46): MALLOC pieces.dbg.spill.i.i64
	(0, 47): Wna (, 0x0)
	(0, 48): MALLOC order.dbg.spill3.i.i65
	(0, 49): MALLOC order.dbg.spill2.i.i66
	(0, 50): MALLOC val.dbg.spill1.i.i67
	(0, 51): Wna (, 0x0)
	(0, 52): MALLOC order.dbg.spill.i.i68
	(0, 53): MALLOC val.dbg.spill.i.i69
	(0, 54): Wna (, 0x0)
	(0, 55): MALLOC 
	(0, 56): Wna (, 0x0)
	(0, 57): MALLOC 
	(0, 58): Wna (, 0x0)
	(0, 59): MALLOC 
	(0, 60): Wna (, 0x0)
	(0, 61): MALLOC dst.dbg.spill.i.i33
	(0, 62): Wna (, 0x0)
	(0, 63): MALLOC self.dbg.spill15.i.i
	(0, 64): Wna (, 0x0)
	(0, 65): MALLOC inner.dbg.spill14.i.i
	(0, 66): Wna (, 0x0)
	(0, 67): MALLOC inner.dbg.spill.i.i
	(0, 68): Wna (, 0x0)
	(0, 69): MALLOC self.dbg.spill12.i.i34
	(0, 70): Wna (, 0x0)
	(0, 71): MALLOC ptr.dbg.spill11.i.i
	(0, 72): Wna (, 0x0)
	(0, 73): MALLOC ptr.dbg.spill.i.i
	(0, 74): Wna (, 0x0)
	(0, 75): MALLOC self.dbg.spill10.i.i
	(0, 76): Wna (, 0x0)
	(0, 77): MALLOC self.dbg.spill.i.i35
	(0, 78): Wna (, 0x0)
	(0, 79): MALLOC _2.i.i36
	(0, 80): Wna (, 0x0)
	(0, 81): Wna (, 0x0)
	(0, 82): MALLOC force_no_backtrace.dbg.spill6.i.i37
	(0, 83): MALLOC can_unwind.dbg.spill5.i.i38
	(0, 84): MALLOC pieces.dbg.spill4.i.i39
	(0, 85): Wna (, 0x0)
	(0, 86): MALLOC force_no_backtrace.dbg.spill.i.i40
	(0, 87): MALLOC can_unwind.dbg.spill.i.i41
	(0, 88): MALLOC pieces.dbg.spill.i.i42
	(0, 89): Wna (, 0x0)
	(0, 90): MALLOC order.dbg.spill3.i.i43
	(0, 91): MALLOC order.dbg.spill2.i.i44
	(0, 92): MALLOC val.dbg.spill1.i.i45
	(0, 93): Wna (, 0x0)
	(0, 94): MALLOC order.dbg.spill.i.i46
	(0, 95): MALLOC val.dbg.spill.i.i47
	(0, 96): Wna (, 0x0)
	(0, 97): MALLOC _x.i30
	(0, 98): Wna (, 0x0)
	(0, 99): Wna (, 0x0)
	(0, 100): MALLOC _x.i
	(0, 101): Wna (, 0x0)
	(0, 102): Wna (, 0x0)
	(0, 103): MALLOC 
	(0, 104): Wna (, 0x0)
	(0, 105): MALLOC dst.dbg.spill.i.i6
	(0, 106): Wna (, 0x0)
	(0, 107): MALLOC self.dbg.spill14.i.i7
	(0, 108): Wna (, 0x0)
	(0, 109): MALLOC self.dbg.spill13.i.i8
	(0, 110): Wna (, 0x0)
	(0, 111): MALLOC self.dbg.spill12.i.i9
	(0, 112): Wna (, 0x0)
	(0, 113): MALLOC self.dbg.spill11.i.i10
	(0, 114): Wna (, 0x0)
	(0, 115): MALLOC self.dbg.spill9.i.i11
	(0, 116): Wna (, 0x0)
	(0, 117): MALLOC self.dbg.spill.i.i12
	(0, 118): Wna (, 0x0)
	(0, 119): MALLOC force_no_backtrace.dbg.spill6.i.i13
	(0, 120): MALLOC can_unwind.dbg.spill5.i.i14
	(0, 121): MALLOC pieces.dbg.spill4.i.i15
	(0, 122): Wna (, 0x0)
	(0, 123): MALLOC force_no_backtrace.dbg.spill.i.i16
	(0, 124): MALLOC can_unwind.dbg.spill.i.i17
	(0, 125): MALLOC pieces.dbg.spill.i.i18
	(0, 126): Wna (, 0x0)
	(0, 127): MALLOC order.dbg.spill3.i.i19
	(0, 128): MALLOC order.dbg.spill2.i.i20
	(0, 129): MALLOC val.dbg.spill1.i.i21
	(0, 130): Wna (, 0x0)
	(0, 131): MALLOC order.dbg.spill.i.i22
	(0, 132): MALLOC val.dbg.spill.i.i23
	(0, 133): Wna (, 0x0)
	(0, 134): MALLOC 
	(0, 135): Wna (, 0x0)
	(0, 136): MALLOC dst.dbg.spill.i.i
	(0, 137): Wna (, 0x0)
	(0, 138): MALLOC self.dbg.spill14.i.i
	(0, 139): Wna (, 0x0)
	(0, 140): MALLOC self.dbg.spill13.i.i
	(0, 141): Wna (, 0x0)
	(0, 142): MALLOC self.dbg.spill12.i.i
	(0, 143): Wna (, 0x0)
	(0, 144): MALLOC self.dbg.spill11.i.i
	(0, 145): Wna (, 0x0)
	(0, 146): MALLOC self.dbg.spill9.i.i
	(0, 147): Wna (, 0x0)
	(0, 148): MALLOC self.dbg.spill.i.i
	(0, 149): Wna (, 0x0)
	(0, 150): MALLOC force_no_backtrace.dbg.spill6.i.i
	(0, 151): MALLOC can_unwind.dbg.spill5.i.i
	(0, 152): MALLOC pieces.dbg.spill4.i.i
	(0, 153): Wna (, 0x0)
	(0, 154): MALLOC force_no_backtrace.dbg.spill.i.i
	(0, 155): MALLOC can_unwind.dbg.spill.i.i
	(0, 156): MALLOC pieces.dbg.spill.i.i
	(0, 157): Wna (, 0x0)
	(0, 158): MALLOC order.dbg.spill3.i.i
	(0, 159): MALLOC order.dbg.spill2.i.i
	(0, 160): MALLOC val.dbg.spill1.i.i
	(0, 161): Wna (, 0x0)
	(0, 162): MALLOC order.dbg.spill.i.i
	(0, 163): MALLOC val.dbg.spill.i.i
	(0, 164): Wna (, 0x0)
	(0, 165): MALLOC 
	(0, 166): Wna (, 0x0)
	(0, 167): MALLOC pi.i6
	(0, 168): Wna (pi.i6[0], 0x0)
	(0, 169): Wna (pi.i6[8], 0x0)
	(0, 170): Wna (pi.i6[16], 0x0)
	(0, 171): Wna (pi.i6[24], 0x0)
	(0, 172): Wna (pi.i6[32], 0x0)
	(0, 173): Wna (pi.i6[40], 0x0)
	(0, 174): Wna (pi.i6[48], 0x0)
	(0, 175): Wna (pi.i6[56], 0x0)
	(0, 176): MALLOC _19.i7
	(0, 177): Wna (, 0x0)
	(0, 178): Wna (, 0x0)
	(0, 179): MALLOC _12.i8
	(0, 180): Wna (, 0x0)
	(0, 181): Wna (, 0x0)
	(0, 182): MALLOC _6.i9
	(0, 183): Wna (, 0x0)
	(0, 184): Wna (, 0x0)
	(0, 185): Wna (, 0x0)
	(0, 186): Wna (, 0x0)
	(0, 187): MALLOC fmt.i10
	(0, 188): Wna (fmt.i10[0], 0x0)
	(0, 189): Wna (fmt.i10[8], 0x0)
	(0, 190): Wna (fmt.i10[16], 0x0)
	(0, 191): Wna (fmt.i10[24], 0x0)
	(0, 192): Wna (fmt.i10[32], 0x0)
	(0, 193): Wna (fmt.i10[40], 0x0)
	(0, 194): MALLOC error.i11
	(0, 195): Wna (error.i11[0], 0x0)
	(0, 196): Wna (error.i11[8], 0x0)
	(0, 197): MALLOC msg.i12
	(0, 198): Wna (msg.i12[0], 0x0)
	(0, 199): Wna (msg.i12[8], 0x0)
	(0, 200): MALLOC 
	(0, 201): Wna (, 0x0)
	(0, 202): MALLOC pi.i
	(0, 203): Wna (pi.i[0], 0x0)
	(0, 204): Wna (pi.i[8], 0x0)
	(0, 205): Wna (pi.i[16], 0x0)
	(0, 206): Wna (pi.i[24], 0x0)
	(0, 207): Wna (pi.i[32], 0x0)
	(0, 208): Wna (pi.i[40], 0x0)
	(0, 209): Wna (pi.i[48], 0x0)
	(0, 210): Wna (pi.i[56], 0x0)
	(0, 211): MALLOC _19.i
	(0, 212): Wna (, 0x0)
	(0, 213): Wna (, 0x0)
	(0, 214): MALLOC _12.i5
	(0, 215): Wna (, 0x0)
	(0, 216): Wna (, 0x0)
	(0, 217): MALLOC _6.i
	(0, 218): Wna (, 0x0)
	(0, 219): Wna (, 0x0)
	(0, 220): Wna (, 0x0)
	(0, 221): Wna (, 0x0)
	(0, 222): MALLOC fmt.i
	(0, 223): Wna (fmt.i[0], 0x0)
	(0, 224): Wna (fmt.i[8], 0x0)
	(0, 225): Wna (fmt.i[16], 0x0)
	(0, 226): Wna (fmt.i[24], 0x0)
	(0, 227): Wna (fmt.i[32], 0x0)
	(0, 228): Wna (fmt.i[40], 0x0)
	(0, 229): MALLOC error.i
	(0, 230): Wna (error.i[0], 0x0)
	(0, 231): Wna (error.i[8], 0x0)
	(0, 232): MALLOC msg.i
	(0, 233): Wna (msg.i[0], 0x0)
	(0, 234): Wna (msg.i[8], 0x0)
	(0, 235): MALLOC e.i1
	(0, 236): MALLOC self.i2
	(0, 237): Wna (self.i2[0], 0x0)
	(0, 238): MALLOC e.i
	(0, 239): Wna (e.i[0], 0x0)
	(0, 240): Wna (e.i[8], 0x0)
	(0, 241): MALLOC self.i
	(0, 242): Wna (self.i[0], 0x0)
	(0, 243): Wna (self.i[8], 0x0)
	(0, 244): MALLOC b.i
	(0, 245): Wna (b.i[0], 0x0)
	(0, 246): MALLOC _4.i
	(0, 247): Wna (, 0x0)
	(0, 248): MALLOC _3.i
	(0, 249): Wna (_3.i[0], 0x0)
	(0, 250): Wna (_3.i[8], 0x0)
	(0, 251): Wna (_3.i[16], 0x0)
	(0, 252): MALLOC foo_clone1.dbg.spill
	(0, 253): Wna (foo_clone1.dbg.spill[0], 0x0)
	(0, 254): MALLOC t1
	(0, 255): Wna (t1[0], 0x0)
	(0, 256): Wna (t1[8], 0x0)
	(0, 257): Wna (t1[16], 0x0)
	(0, 258): MALLOC foo_clone2
	(0, 259): Wna (foo_clone2[0], 0x0)
	(0, 260): MALLOC foo
	(0, 261): Wna (foo[0], 0x0) atomic.rs:2194
	(0, 262): Wna (, 1) atomic.rs:2194
	(0, 263): Rna (, 1) [(0, 262)] sync.rs:390
	(0, 264): Wna (_3.i[0], 1) sync.rs:390
	(0, 265): Rna (, 1) [(0, 262)] sync.rs:390
	(0, 266): Wna (_3.i[8], 1) sync.rs:390
	(0, 267): Wna (_3.i[16], 0) sync.rs:390
	(0, 268): MALLOC _13
	(0, 269): Wna (, 0x0)
	(0, 270): MALLOC _4
	(0, 271): Wna (, 0x0) alloc.rs:243
	(0, 272): Wna (, 0x0) alloc.rs:243
	(0, 273): MALLOC _48
	(0, 274): Wna (, 0x0)
	(0, 275): MALLOC ptr
	(0, 276): Wna (ptr[0], 0x0)
	(0, 277): Wna (ptr[8], 0x0)
	(0, 278): MALLOC _21
	(0, 279): Wna (, 0x0)
	(0, 280): MALLOC self7
	(0, 281): Wna (self7[0], 0x0)
	(0, 282): MALLOC self6
	(0, 283): Wna (self6[0], 0x0)
	(0, 284): MALLOC _12
	(0, 285): Wna (, 0x0)
	(0, 286): MALLOC raw_ptr
	(0, 287): Wna (raw_ptr[0], 0x0)
	(0, 288): MALLOC _0
	(0, 289): Wna (, 0x0)
	(0, 290): Wna (, 0x0)
	(0, 291): MALLOC layout
	(0, 292): Wna (layout[0], 0x0) mod.rs:768
	(0, 293): Wna (layout[8], 0x0) mod.rs:768
	(0, 294): Wna (layout[0], 8) mod.rs:768
	(0, 295): Wna (layout[8], 24) mod.rs:768
	(0, 296): Rna (layout[8], 24) [(0, 295)] layout.rs:131
	(0, 297): Rna (layout[0], 8) [(0, 294)] layout.rs:144
	(0, 298): Wna (, 8) alignment.rs:97
	(0, 299): Rna (, 8) [(0, 298)] alignment.rs:97
	(0, 300): MALLOC  alloc.rs:100
	(0, 301): Wna (raw_ptr[0], 0x10) alloc.rs:100
	(0, 302): Rna (raw_ptr[0], 0x10) [(0, 301)] alloc.rs:184
	(0, 303): Wna (self7[0], 0x10) non_null.rs:249
	(0, 304): Rna (self7[0], 0x10) [(0, 303)] option.rs:1246
	(0, 305): Wna (self6[0], 0x10) option.rs:1246
	(0, 306): Rna (self6[0], 0x10) [(0, 305)] result.rs:1977
	(0, 307): Wna (, 0x10) result.rs:1977
	(0, 308): Rna (, 0x10) [(0, 307)] alloc.rs:184
	(0, 309): Wna (, 0x10) alloc.rs:185
	(0, 310): Wna (, 24) alloc.rs:185
	(0, 311): Rna (, 0x10) [(0, 309)] alloc.rs:188
	(0, 312): Rna (, 24) [(0, 310)] alloc.rs:188
	(0, 313): FREE alloc.rs:188
	(0, 314): FREE
	(0, 315): FREE
	(0, 316): FREE
	(0, 317): FREE
	(0, 318): FREE
	(0, 319): FREE
	(0, 320): FREE
	(0, 321): FREE
	(0, 322): Wna (, 0x10) alloc.rs:243
	(0, 323): Wna (, 24) alloc.rs:243
	(0, 324): Rna (, 0x10) [(0, 322)] alloc.rs:332
	(0, 325): Rna (, 0x10) [(0, 322)] alloc.rs:333
	(0, 326): FREE alloc.rs:336
	(0, 327): FREE
	(0, 328): Rna (_3.i[0], 1) [(0, 264)] boxed.rs:260
	(0, 329): Wna (, 1) boxed.rs:260
	(0, 330): Rna (_3.i[8], 1) [(0, 266)] boxed.rs:260
	(0, 331): Wna (, 1) boxed.rs:260
	(0, 332): Rna (_3.i[16], 0) [(0, 267)] boxed.rs:260
	(0, 333): Wna (, 0) boxed.rs:260
	(0, 334): Wna (b.i[0], 0x10) manually_drop.rs:74
	(0, 335): Rna (b.i[0], 0x10) [(0, 334)] boxed.rs:1162
	(0, 336): Wna (foo[0], 0x10) main.rs:21
	(0, 337): MALLOC 
	(0, 338): Wna (, 0x0) non_null.rs:402
	(0, 339): Rna (foo[0], 0x10) [(0, 336)] non_null.rs:402
	(0, 340): URrlx (, 1) [(0, 329)] atomic.rs:3346
	(0, 341): UWrlx (, 2)
	(0, 342): Wna (, 1) atomic.rs:3346
	(0, 343): Rna (, 1) [(0, 342)] atomic.rs:3346
	(0, 344): Rna (foo[0], 0x10) [(0, 336)] sync.rs:2138
	(0, 345): FREE sync.rs:2139
	(0, 346): Wna (foo_clone1.dbg.spill[0], 0x10) main.rs:23
	(0, 347): MALLOC 
	(0, 348): Wna (, 0x0) non_null.rs:402
	(0, 349): Rna (foo[0], 0x10) [(0, 336)] non_null.rs:402
	(0, 350): URrlx (, 2) [(0, 341)] atomic.rs:3346
	(0, 351): UWrlx (, 3)
	(0, 352): Wna (, 2) atomic.rs:3346
	(0, 353): Rna (, 2) [(0, 352)] atomic.rs:3346
	(0, 354): Rna (foo[0], 0x10) [(0, 336)] sync.rs:2138
	(0, 355): FREE sync.rs:2139
	(0, 356): Wna (foo_clone2[0], 0x10) main.rs:24
	(0, 357): MALLOC _4
	(0, 358): Wna (, 0x0)
	(0, 359): Wna (, 0x0)
	(0, 360): Wna (, 0x0)
	(0, 361): MALLOC self
	(0, 362): Wna (self[0], 0x0)
	(0, 363): Wna (self[8], 0x0)
	(0, 364): Wna (self[16], 0x0)
	(0, 365): Wna (self[24], 0x0)
	(0, 366): Wna (self[32], 0x0)
	(0, 367): MALLOC _2
	(0, 368): Wna (, 0x0) mod.rs:293
	(0, 369): Wna (, 0x0) mod.rs:293
	(0, 370): Wna (, 0x0) mod.rs:293
	(0, 371): Wna (, -9223372036854775808) mod.rs:293
	(0, 372): Rna (, -9223372036854775808) [(0, 371)] mod.rs:293
	(0, 373): Wna (self[16], -9223372036854775808) mod.rs:293
	(0, 374): Rna (, 0) [(0, 359)] mod.rs:293
	(0, 375): Wna (self[24], 0) mod.rs:293
	(0, 376): Rna (, 0) [(0, 360)] mod.rs:293
	(0, 377): Wna (self[32], 0) mod.rs:293
	(0, 378): Wna (self[0], 0) mod.rs:293
	(0, 379): Wna (self[8], 0) mod.rs:293
	(0, 380): MALLOC _8.i413
	(0, 381): Wna (, 0x0)
	(0, 382): Wna (, 0x0)
	(0, 383): Wna (, 0x0)
	(0, 384): MALLOC _8.i399
	(0, 385): Wna (, 0x0)
	(0, 386): Wna (, 0x0)
	(0, 387): Wna (, 0x0)
	(0, 388): MALLOC _8.i
	(0, 389): Wna (, 0x0)
	(0, 390): Wna (, 0x0)
	(0, 391): Wna (, 0x0)
	(0, 392): MALLOC _13.i.i384
	(0, 393): Wna (, 0x0)
	(0, 394): MALLOC layout.i.i385
	(0, 395): Wna (, 0x0)
	(0, 396): Wna (, 0x0)
	(0, 397): MALLOC _2.i386
	(0, 398): Wna (, 0x0)
	(0, 399): Wna (, 0x0)
	(0, 400): Wna (, 0x0)
	(0, 401): MALLOC _13.i.i371
	(0, 402): Wna (, 0x0)
	(0, 403): MALLOC layout.i.i372
	(0, 404): Wna (, 0x0)
	(0, 405): Wna (, 0x0)
	(0, 406): MALLOC _2.i373
	(0, 407): Wna (, 0x0)
	(0, 408): Wna (, 0x0)
	(0, 409): Wna (, 0x0)
	(0, 410): MALLOC _13.i.i
	(0, 411): Wna (, 0x0)
	(0, 412): MALLOC layout.i.i
	(0, 413): Wna (, 0x0)
	(0, 414): Wna (, 0x0)
	(0, 415): MALLOC _2.i368
	(0, 416): Wna (, 0x0)
	(0, 417): Wna (, 0x0)
	(0, 418): Wna (, 0x0)
	(0, 419): MALLOC _13.i.i.i321
	(0, 420): Wna (, 0x0)
	(0, 421): MALLOC layout.i.i.i322
	(0, 422): Wna (, 0x0)
	(0, 423): Wna (, 0x0)
	(0, 424): MALLOC 
	(0, 425): Wna (, 0x0)
	(0, 426): MALLOC 
	(0, 427): Wna (, 0x0)
	(0, 428): MALLOC 
	(0, 429): Wna (, 0x0)
	(0, 430): MALLOC dst.dbg.spill.i.i.i323
	(0, 431): Wna (, 0x0)
	(0, 432): MALLOC self.dbg.spill15.i.i.i324
	(0, 433): Wna (, 0x0)
	(0, 434): MALLOC inner.dbg.spill14.i.i.i325
	(0, 435): Wna (, 0x0)
	(0, 436): MALLOC inner.dbg.spill.i.i.i326
	(0, 437): Wna (, 0x0)
	(0, 438): MALLOC self.dbg.spill12.i.i.i327
	(0, 439): Wna (, 0x0)
	(0, 440): MALLOC ptr.dbg.spill11.i.i.i328
	(0, 441): Wna (, 0x0)
	(0, 442): MALLOC ptr.dbg.spill.i.i.i329
	(0, 443): Wna (, 0x0)
	(0, 444): MALLOC self.dbg.spill10.i.i.i330
	(0, 445): Wna (, 0x0)
	(0, 446): MALLOC self.dbg.spill.i.i.i331
	(0, 447): Wna (, 0x0)
	(0, 448): MALLOC _2.i.i.i332
	(0, 449): Wna (, 0x0)
	(0, 450): Wna (, 0x0)
	(0, 451): MALLOC force_no_backtrace.dbg.spill6.i.i.i333
	(0, 452): MALLOC can_unwind.dbg.spill5.i.i.i334
	(0, 453): MALLOC pieces.dbg.spill4.i.i.i335
	(0, 454): Wna (, 0x0)
	(0, 455): MALLOC force_no_backtrace.dbg.spill.i.i.i336
	(0, 456): MALLOC can_unwind.dbg.spill.i.i.i337
	(0, 457): MALLOC pieces.dbg.spill.i.i.i338
	(0, 458): Wna (, 0x0)
	(0, 459): MALLOC order.dbg.spill3.i.i.i339
	(0, 460): MALLOC order.dbg.spill2.i.i.i340
	(0, 461): MALLOC val.dbg.spill1.i.i.i341
	(0, 462): Wna (, 0x0)
	(0, 463): MALLOC order.dbg.spill.i.i.i342
	(0, 464): MALLOC val.dbg.spill.i.i.i343
	(0, 465): Wna (, 0x0)
	(0, 466): MALLOC _x.i344
	(0, 467): Wna (, 0x0)
	(0, 468): Wna (, 0x0)
	(0, 469): MALLOC _13.i.i.i274
	(0, 470): Wna (, 0x0)
	(0, 471): MALLOC layout.i.i.i275
	(0, 472): Wna (, 0x0)
	(0, 473): Wna (, 0x0)
	(0, 474): MALLOC 
	(0, 475): Wna (, 0x0)
	(0, 476): MALLOC 
	(0, 477): Wna (, 0x0)
	(0, 478): MALLOC 
	(0, 479): Wna (, 0x0)
	(0, 480): MALLOC dst.dbg.spill.i.i.i276
	(0, 481): Wna (, 0x0)
	(0, 482): MALLOC self.dbg.spill15.i.i.i277
	(0, 483): Wna (, 0x0)
	(0, 484): MALLOC inner.dbg.spill14.i.i.i278
	(0, 485): Wna (, 0x0)
	(0, 486): MALLOC inner.dbg.spill.i.i.i279
	(0, 487): Wna (, 0x0)
	(0, 488): MALLOC self.dbg.spill12.i.i.i280
	(0, 489): Wna (, 0x0)
	(0, 490): MALLOC ptr.dbg.spill11.i.i.i281
	(0, 491): Wna (, 0x0)
	(0, 492): MALLOC ptr.dbg.spill.i.i.i282
	(0, 493): Wna (, 0x0)
	(0, 494): MALLOC self.dbg.spill10.i.i.i283
	(0, 495): Wna (, 0x0)
	(0, 496): MALLOC self.dbg.spill.i.i.i284
	(0, 497): Wna (, 0x0)
	(0, 498): MALLOC _2.i.i.i285
	(0, 499): Wna (, 0x0)
	(0, 500): Wna (, 0x0)
	(0, 501): MALLOC force_no_backtrace.dbg.spill6.i.i.i286
	(0, 502): MALLOC can_unwind.dbg.spill5.i.i.i287
	(0, 503): MALLOC pieces.dbg.spill4.i.i.i288
	(0, 504): Wna (, 0x0)
	(0, 505): MALLOC force_no_backtrace.dbg.spill.i.i.i289
	(0, 506): MALLOC can_unwind.dbg.spill.i.i.i290
	(0, 507): MALLOC pieces.dbg.spill.i.i.i291
	(0, 508): Wna (, 0x0)
	(0, 509): MALLOC order.dbg.spill3.i.i.i292
	(0, 510): MALLOC order.dbg.spill2.i.i.i293
	(0, 511): MALLOC val.dbg.spill1.i.i.i294
	(0, 512): Wna (, 0x0)
	(0, 513): MALLOC order.dbg.spill.i.i.i295
	(0, 514): MALLOC val.dbg.spill.i.i.i296
	(0, 515): Wna (, 0x0)
	(0, 516): MALLOC _x.i297
	(0, 517): Wna (, 0x0)
	(0, 518): Wna (, 0x0)
	(0, 519): MALLOC _13.i.i.i
	(0, 520): Wna (, 0x0)
	(0, 521): MALLOC layout.i.i.i
	(0, 522): Wna (, 0x0)
	(0, 523): Wna (, 0x0)
	(0, 524): MALLOC 
	(0, 525): Wna (, 0x0)
	(0, 526): MALLOC 
	(0, 527): Wna (, 0x0)
	(0, 528): MALLOC 
	(0, 529): Wna (, 0x0)
	(0, 530): MALLOC dst.dbg.spill.i.i.i
	(0, 531): Wna (, 0x0)
	(0, 532): MALLOC self.dbg.spill15.i.i.i
	(0, 533): Wna (, 0x0)
	(0, 534): MALLOC inner.dbg.spill14.i.i.i
	(0, 535): Wna (, 0x0)
	(0, 536): MALLOC inner.dbg.spill.i.i.i
	(0, 537): Wna (, 0x0)
	(0, 538): MALLOC self.dbg.spill12.i.i.i
	(0, 539): Wna (, 0x0)
	(0, 540): MALLOC ptr.dbg.spill11.i.i.i
	(0, 541): Wna (, 0x0)
	(0, 542): MALLOC ptr.dbg.spill.i.i.i
	(0, 543): Wna (, 0x0)
	(0, 544): MALLOC self.dbg.spill10.i.i.i
	(0, 545): Wna (, 0x0)
	(0, 546): MALLOC self.dbg.spill.i.i.i
	(0, 547): Wna (, 0x0)
	(0, 548): MALLOC _2.i.i.i
	(0, 549): Wna (, 0x0)
	(0, 550): Wna (, 0x0)
	(0, 551): MALLOC force_no_backtrace.dbg.spill6.i.i.i
	(0, 552): MALLOC can_unwind.dbg.spill5.i.i.i
	(0, 553): MALLOC pieces.dbg.spill4.i.i.i
	(0, 554): Wna (, 0x0)
	(0, 555): MALLOC force_no_backtrace.dbg.spill.i.i.i
	(0, 556): MALLOC can_unwind.dbg.spill.i.i.i
	(0, 557): MALLOC pieces.dbg.spill.i.i.i
	(0, 558): Wna (, 0x0)
	(0, 559): MALLOC order.dbg.spill3.i.i.i
	(0, 560): MALLOC order.dbg.spill2.i.i.i
	(0, 561): MALLOC val.dbg.spill1.i.i.i
	(0, 562): Wna (, 0x0)
	(0, 563): MALLOC order.dbg.spill.i.i.i
	(0, 564): MALLOC val.dbg.spill.i.i.i
	(0, 565): Wna (, 0x0)
	(0, 566): MALLOC _x.i272
	(0, 567): Wna (, 0x0)
	(0, 568): Wna (, 0x0)
	(0, 569): MALLOC 
	(0, 570): Wna (, 0x0)
	(0, 571): MALLOC dst.dbg.spill.i.i250
	(0, 572): Wna (, 0x0)
	(0, 573): MALLOC self.dbg.spill14.i.i251
	(0, 574): Wna (, 0x0)
	(0, 575): MALLOC self.dbg.spill13.i.i252
	(0, 576): Wna (, 0x0)
	(0, 577): MALLOC self.dbg.spill12.i.i253
	(0, 578): Wna (, 0x0)
	(0, 579): MALLOC self.dbg.spill11.i.i254
	(0, 580): Wna (, 0x0)
	(0, 581): MALLOC self.dbg.spill9.i.i255
	(0, 582): Wna (, 0x0)
	(0, 583): MALLOC self.dbg.spill.i.i256
	(0, 584): Wna (, 0x0)
	(0, 585): MALLOC force_no_backtrace.dbg.spill6.i.i257
	(0, 586): MALLOC can_unwind.dbg.spill5.i.i258
	(0, 587): MALLOC pieces.dbg.spill4.i.i259
	(0, 588): Wna (, 0x0)
	(0, 589): MALLOC force_no_backtrace.dbg.spill.i.i260
	(0, 590): MALLOC can_unwind.dbg.spill.i.i261
	(0, 591): MALLOC pieces.dbg.spill.i.i262
	(0, 592): Wna (, 0x0)
	(0, 593): MALLOC order.dbg.spill3.i.i263
	(0, 594): MALLOC order.dbg.spill2.i.i264
	(0, 595): MALLOC val.dbg.spill1.i.i265
	(0, 596): Wna (, 0x0)
	(0, 597): MALLOC order.dbg.spill.i.i266
	(0, 598): MALLOC val.dbg.spill.i.i267
	(0, 599): Wna (, 0x0)
	(0, 600): MALLOC 
	(0, 601): Wna (, 0x0)
	(0, 602): MALLOC dst.dbg.spill.i.i228
	(0, 603): Wna (, 0x0)
	(0, 604): MALLOC self.dbg.spill14.i.i229
	(0, 605): Wna (, 0x0)
	(0, 606): MALLOC self.dbg.spill13.i.i230
	(0, 607): Wna (, 0x0)
	(0, 608): MALLOC self.dbg.spill12.i.i231
	(0, 609): Wna (, 0x0)
	(0, 610): MALLOC self.dbg.spill11.i.i232
	(0, 611): Wna (, 0x0)
	(0, 612): MALLOC self.dbg.spill9.i.i233
	(0, 613): Wna (, 0x0)
	(0, 614): MALLOC self.dbg.spill.i.i234
	(0, 615): Wna (, 0x0)
	(0, 616): MALLOC force_no_backtrace.dbg.spill6.i.i235
	(0, 617): MALLOC can_unwind.dbg.spill5.i.i236
	(0, 618): MALLOC pieces.dbg.spill4.i.i237
	(0, 619): Wna (, 0x0)
	(0, 620): MALLOC force_no_backtrace.dbg.spill.i.i238
	(0, 621): MALLOC can_unwind.dbg.spill.i.i239
	(0, 622): MALLOC pieces.dbg.spill.i.i240
	(0, 623): Wna (, 0x0)
	(0, 624): MALLOC order.dbg.spill3.i.i241
	(0, 625): MALLOC order.dbg.spill2.i.i242
	(0, 626): MALLOC val.dbg.spill1.i.i243
	(0, 627): Wna (, 0x0)
	(0, 628): MALLOC order.dbg.spill.i.i244
	(0, 629): MALLOC val.dbg.spill.i.i245
	(0, 630): Wna (, 0x0)
	(0, 631): MALLOC 
	(0, 632): Wna (, 0x0)
	(0, 633): MALLOC dst.dbg.spill.i.i
	(0, 634): Wna (, 0x0)
	(0, 635): MALLOC self.dbg.spill14.i.i
	(0, 636): Wna (, 0x0)
	(0, 637): MALLOC self.dbg.spill13.i.i
	(0, 638): Wna (, 0x0)
	(0, 639): MALLOC self.dbg.spill12.i.i
	(0, 640): Wna (, 0x0)
	(0, 641): MALLOC self.dbg.spill11.i.i
	(0, 642): Wna (, 0x0)
	(0, 643): MALLOC self.dbg.spill9.i.i
	(0, 644): Wna (, 0x0)
	(0, 645): MALLOC self.dbg.spill.i.i
	(0, 646): Wna (, 0x0)
	(0, 647): MALLOC force_no_backtrace.dbg.spill6.i.i
	(0, 648): MALLOC can_unwind.dbg.spill5.i.i
	(0, 649): MALLOC pieces.dbg.spill4.i.i
	(0, 650): Wna (, 0x0)
	(0, 651): MALLOC force_no_backtrace.dbg.spill.i.i
	(0, 652): MALLOC can_unwind.dbg.spill.i.i
	(0, 653): MALLOC pieces.dbg.spill.i.i
	(0, 654): Wna (, 0x0)
	(0, 655): MALLOC order.dbg.spill3.i.i
	(0, 656): MALLOC order.dbg.spill2.i.i
	(0, 657): MALLOC val.dbg.spill1.i.i
	(0, 658): Wna (, 0x0)
	(0, 659): MALLOC order.dbg.spill.i.i
	(0, 660): MALLOC val.dbg.spill.i.i
	(0, 661): Wna (, 0x0)
	(0, 662): MALLOC _2.i
	(0, 663): Wna (, 0x0)
	(0, 664): Wna (, 0x0)
	(0, 665): MALLOC _9.i
	(0, 666): MALLOC _4.i23
	(0, 667): MALLOC _0.i24
	(0, 668): Wna (, 0x0)
	(0, 669): MALLOC v2.i
	(0, 670): Wna (v2.i[0], 0x0)
	(0, 671): MALLOC v1.i
	(0, 672): Wna (v1.i[0], 0x0)
	(0, 673): MALLOC x.i21
	(0, 674): Wna (x.i21[0], 0x0)
	(0, 675): Wna (x.i21[8], 0x0)
	(0, 676): MALLOC u14.i
	(0, 677): Wna (u14.i[0], 0x0)
	(0, 678): Wna (u14.i[8], 0x0)
	(0, 679): Wna (u14.i[16], 0x0)
	(0, 680): Wna (u14.i[24], 0x0)
	(0, 681): Wna (u14.i[32], 0x0)
	(0, 682): Wna (u14.i[40], 0x0)
	(0, 683): Wna (u14.i[48], 0x0)
	(0, 684): MALLOC u.i
	(0, 685): Wna (u.i[0], 0x0)
	(0, 686): MALLOC b.i8
	(0, 687): Wna (b.i8[0], 0x0)
	(0, 688): MALLOC _39.i10
	(0, 689): MALLOC _7.i13
	(0, 690): MALLOC attr.i
	(0, 691): Wna (attr.i[0], 0x0)
	(0, 692): Wna (attr.i[8], 0x0)
	(0, 693): Wna (attr.i[16], 0x0)
	(0, 694): Wna (attr.i[24], 0x0)
	(0, 695): Wna (attr.i[32], 0x0)
	(0, 696): Wna (attr.i[40], 0x0)
	(0, 697): Wna (attr.i[48], 0x0)
	(0, 698): MALLOC native.i
	(0, 699): Wna (native.i[0], 0x0)
	(0, 700): MALLOC _0.i14
	(0, 701): Wna (, 0x0)
	(0, 702): Wna (, 0x0)
	(0, 703): MALLOC _10.i
	(0, 704): MALLOC _7.i
	(0, 705): Wna (, 0x0)
	(0, 706): Wna (, 0x0)
	(0, 707): Wna (, 0x0)
	(0, 708): MALLOC _0.i
	(0, 709): Wna (, 0x0)
	(0, 710): MALLOC 
	(0, 711): Wna (, 0x0)
	(0, 712): MALLOC 
	(0, 713): Wna (, 0x0)
	(0, 714): MALLOC old_size.dbg.spill.i
	(0, 715): Wna (old_size.dbg.spill.i[0], 0x0)
	(0, 716): MALLOC 
	(0, 717): Wna (, 0x0)
	(0, 718): MALLOC dst.dbg.spill.i
	(0, 719): Wna (dst.dbg.spill.i[0], 0x0)
	(0, 720): MALLOC self.dbg.spill30.i
	(0, 721): Wna (self.dbg.spill30.i[0], 0x0)
	(0, 722): MALLOC self.dbg.spill29.i
	(0, 723): Wna (self.dbg.spill29.i[0], 0x0)
	(0, 724): MALLOC self.dbg.spill28.i
	(0, 725): Wna (self.dbg.spill28.i[0], 0x0)
	(0, 726): MALLOC self.dbg.spill27.i
	(0, 727): Wna (self.dbg.spill27.i[0], 0x0)
	(0, 728): MALLOC self.dbg.spill25.i
	(0, 729): Wna (self.dbg.spill25.i[0], 0x0)
	(0, 730): MALLOC self.dbg.spill24.i
	(0, 731): Wna (self.dbg.spill24.i[0], 0x0)
	(0, 732): MALLOC self.dbg.spill23.i
	(0, 733): Wna (self.dbg.spill23.i[0], 0x0)
	(0, 734): MALLOC self.dbg.spill.i
	(0, 735): Wna (self.dbg.spill.i[0], 0x0)
	(0, 736): MALLOC x.dbg.spill.i
	(0, 737): Wna (x.dbg.spill.i[0], 0x0)
	(0, 738): MALLOC _139.i
	(0, 739): Wna (, 0x0)
	(0, 740): MALLOC b22.i
	(0, 741): Wna (b22.i[0], 0x0)
	(0, 742): MALLOC _113.i
	(0, 743): Wna (, 0x0)
	(0, 744): MALLOC _sink21.i
	(0, 745): Wna (_sink21.i[0], 0x0)
	(0, 746): MALLOC _sink.i
	(0, 747): Wna (_sink.i[0], 0x0)
	(0, 748): MALLOC b.i
	(0, 749): Wna (b.i[0], 0x0)
	(0, 750): MALLOC _71.i
	(0, 751): Wna (, 0x0)
	(0, 752): MALLOC _70.i
	(0, 753): Wna (_70.i[0], 0x0)
	(0, 754): Wna (_70.i[8], 0x0)
	(0, 755): Wna (_70.i[16], 0x0)
	(0, 756): Wna (_70.i[24], 0x0)
	(0, 757): Wna (_70.i[32], 0x0)
	(0, 758): Wna (_70.i[40], 0x0)
	(0, 759): MALLOC _49.i
	(0, 760): MALLOC _48.i
	(0, 761): MALLOC residual.i
	(0, 762): Wna (residual.i[0], 0x0)
	(0, 763): MALLOC self20.i
	(0, 764): Wna (self20.i[0], 0x0)
	(0, 765): Wna (self20.i[8], 0x0)
	(0, 766): MALLOC _35.i
	(0, 767): Wna (, 0x0)
	(0, 768): Wna (, 0x0)
	(0, 769): MALLOC _34.i
	(0, 770): Wna (, 0x0)
	(0, 771): Wna (, 0x0)
	(0, 772): Wna (, 0x0)
	(0, 773): MALLOC _31.i
	(0, 774): Wna (_31.i[0], 0x0)
	(0, 775): Wna (_31.i[8], 0x0)
	(0, 776): Wna (_31.i[16], 0x0)
	(0, 777): Wna (_31.i[24], 0x0)
	(0, 778): MALLOC main.i
	(0, 779): Wna (main.i[0], 0x0)
	(0, 780): Wna (main.i[8], 0x0)
	(0, 781): Wna (main.i[16], 0x0)
	(0, 782): Wna (main.i[24], 0x0)
	(0, 783): MALLOC sink.i
	(0, 784): Wna (sink.i[0], 0x0)
	(0, 785): MALLOC _18.i
	(0, 786): Wna (, 0x0)
	(0, 787): MALLOC output_capture.i
	(0, 788): Wna (output_capture.i[0], 0x0)
	(0, 789): MALLOC their_packet.i
	(0, 790): Wna (their_packet.i[0], 0x0)
	(0, 791): MALLOC value.i
	(0, 792): Wna (value.i[0], 0x0)
	(0, 793): Wna (value.i[8], 0x0)
	(0, 794): Wna (value.i[16], 0x0)
	(0, 795): MALLOC data.i
	(0, 796): Wna (data.i[0], 0x0)
	(0, 797): Wna (data.i[8], 0x0)
	(0, 798): Wna (data.i[16], 0x0)
	(0, 799): Wna (data.i[24], 0x0)
	(0, 800): MALLOC my_packet.i
	(0, 801): Wna (my_packet.i[0], 0x0)
	(0, 802): MALLOC their_thread.i
	(0, 803): Wna (their_thread.i[0], 0x0)
	(0, 804): MALLOC my_thread.i
	(0, 805): Wna (my_thread.i[0], 0x0)
	(0, 806): MALLOC stack_size19.i
	(0, 807): Wna (stack_size19.i[0], 0x0)
	(0, 808): MALLOC stack_size.i
	(0, 809): Wna (stack_size.i[0], 0x0)
	(0, 810): Wna (stack_size.i[8], 0x0)
	(0, 811): MALLOC name.i
	(0, 812): Wna (name.i[0], 0x0)
	(0, 813): Wna (name.i[8], 0x0)
	(0, 814): Wna (name.i[16], 0x0)
	(0, 815): MALLOC scope_data.i
	(0, 816): Wna (scope_data.i[0], 0x0)
	(0, 817): MALLOC f.i
	(0, 818): Wna (f.i[0], 0x0)
	(0, 819): MALLOC order.dbg.spill15.i
	(0, 820): MALLOC val.dbg.spill14.i
	(0, 821): Wna (val.dbg.spill14.i[0], 0x0)
	(0, 822): MALLOC order.dbg.spill13.i
	(0, 823): MALLOC val.dbg.spill12.i
	(0, 824): Wna (val.dbg.spill12.i[0], 0x0)
	(0, 825): MALLOC sink.dbg.spill.i
	(0, 826): Wna (sink.dbg.spill.i[0], 0x0)
	(0, 827): MALLOC order.dbg.spill10.i
	(0, 828): MALLOC val.dbg.spill9.i
	(0, 829): Wna (val.dbg.spill9.i[0], 0x0)
	(0, 830): MALLOC order.dbg.spill8.i
	(0, 831): MALLOC val.dbg.spill7.i
	(0, 832): Wna (val.dbg.spill7.i[0], 0x0)
	(0, 833): MALLOC value.dbg.spill4.i
	(0, 834): Wna (value.dbg.spill4.i[0], 0x0)
	(0, 835): MALLOC v.dbg.spill3.i
	(0, 836): Wna (v.dbg.spill3.i[0], 0x0)
	(0, 837): MALLOC value.dbg.spill.i
	(0, 838): Wna (value.dbg.spill.i[0], 0x0)
	(0, 839): MALLOC v.dbg.spill.i
	(0, 840): Wna (v.dbg.spill.i[0], 0x0)
	(0, 841): MALLOC order.dbg.spill2.i
	(0, 842): MALLOC val.dbg.spill1.i
	(0, 843): Wna (val.dbg.spill1.i[0], 0x0)
	(0, 844): MALLOC order.dbg.spill.i
	(0, 845): MALLOC val.dbg.spill.i
	(0, 846): Wna (val.dbg.spill.i[0], 0x0)
	(0, 847): MALLOC default.dbg.spill.i
	(0, 848): Wna (default.dbg.spill.i[0], 0x0)
	(0, 849): MALLOC _11
	(0, 850): Wna (, 0x0)
	(0, 851): MALLOC residual
	(0, 852): Wna (residual[0], 0x0)
	(0, 853): MALLOC self1
	(0, 854): Wna (self1[0], 0x0)
	(0, 855): Wna (self1[8], 0x0)
	(0, 856): Wna (self1[16], 0x0)
	(0, 857): MALLOC _4
	(0, 858): Wna (, 0x0) option.rs:990
	(0, 859): Wna (, 0x0) option.rs:990
	(0, 860): Wna (, 0x0) option.rs:990
	(0, 861): Wna (default.dbg.spill.i[0], 2097152) option.rs:990
	(0, 862): Wna (val.dbg.spill.i[0], 1) atomic.rs:2671
	(0, 863): Wna (order.dbg.spill.i[0], 0) atomic.rs:2671
	(0, 864): Wna (val.dbg.spill1.i[0], 1) atomic.rs:3342
	(0, 865): Wna (order.dbg.spill2.i[0], 0) atomic.rs:3342
	(0, 866): Wna (v.dbg.spill.i[0], 1) atomic.rs:2193
	(0, 867): Wna (value.dbg.spill.i[0], 1) cell.rs:2078
	(0, 868): Wna (v.dbg.spill3.i[0], 1) atomic.rs:2193
	(0, 869): Wna (value.dbg.spill4.i[0], 1) cell.rs:2078
	(0, 870): Wna (val.dbg.spill7.i[0], 1) atomic.rs:2671
	(0, 871): Wna (order.dbg.spill8.i[0], 0) atomic.rs:2671
	(0, 872): Wna (val.dbg.spill9.i[0], 1) atomic.rs:3342
	(0, 873): Wna (order.dbg.spill10.i[0], 0) atomic.rs:3342
	(0, 874): Wna (sink.dbg.spill.i[0], 0x0) stdio.rs:1070
	(0, 875): Wna (val.dbg.spill12.i[0], 1) atomic.rs:2671
	(0, 876): Wna (order.dbg.spill13.i[0], 0) atomic.rs:2671
	(0, 877): Wna (val.dbg.spill14.i[0], 1) atomic.rs:3342
	(0, 878): Wna (order.dbg.spill15.i[0], 0) atomic.rs:3342
	(0, 879): Wna (f.i[0], 0x10) boxed.rs:1049
	(0, 880): Wna (scope_data.i[0], 0x0) boxed.rs:1049
	(0, 881): Wna (, 1) mod.rs:476
	(0, 882): Wna (, 1) mod.rs:476
	(0, 883): Rna (self[16], -9223372036854775808) [(0, 373)] mod.rs:476
	(0, 884): Wna (name.i[0], -9223372036854775808) mod.rs:476
	(0, 885): Rna (self[24], 0) [(0, 375)] mod.rs:476
	(0, 886): Wna (name.i[8], 0) mod.rs:476
	(0, 887): Rna (self[32], 0) [(0, 377)] mod.rs:476
	(0, 888): Wna (name.i[16], 0) mod.rs:476
	(0, 889): Rna (self[0], 0) [(0, 378)] mod.rs:476
	(0, 890): Rna (self[8], 0) [(0, 379)] mod.rs:476
	(0, 891): Wna (stack_size.i[0], 0) mod.rs:476
	(0, 892): Wna (stack_size.i[8], 0) mod.rs:476
	(0, 893): Rna (stack_size.i[0], 0) [(0, 891)] option.rs:991
	(0, 894): Wna (stack_size19.i[0], 2097152) option.rs:993
	(0, 895): Wna (, 1) option.rs:1215
	(0, 896): Rna (name.i[0], -9223372036854775808) [(0, 884)] option.rs:1215
	(0, 897): MALLOC 
	(0, 898): Wna (, 0x0)
	(0, 899): MALLOC pi.i35.i
	(0, 900): Wna (pi.i35.i[0], 0x0)
	(0, 901): Wna (pi.i35.i[8], 0x0)
	(0, 902): Wna (pi.i35.i[16], 0x0)
	(0, 903): Wna (pi.i35.i[24], 0x0)
	(0, 904): Wna (pi.i35.i[32], 0x0)
	(0, 905): Wna (pi.i35.i[40], 0x0)
	(0, 906): Wna (pi.i35.i[48], 0x0)
	(0, 907): Wna (pi.i35.i[56], 0x0)
	(0, 908): MALLOC fmt.i36.i
	(0, 909): Wna (fmt.i36.i[0], 0x0)
	(0, 910): Wna (fmt.i36.i[8], 0x0)
	(0, 911): Wna (fmt.i36.i[16], 0x0)
	(0, 912): Wna (fmt.i36.i[24], 0x0)
	(0, 913): Wna (fmt.i36.i[32], 0x0)
	(0, 914): Wna (fmt.i36.i[40], 0x0)
	(0, 915): MALLOC 
	(0, 916): Wna (, 0x0)
	(0, 917): MALLOC 
	(0, 918): Wna (, 0x0)
	(0, 919): MALLOC new.dbg.spill.i.i
	(0, 920): Wna (new.dbg.spill.i.i[0], 0x0)
	(0, 921): MALLOC old.dbg.spill.i.i
	(0, 922): Wna (old.dbg.spill.i.i[0], 0x0)
	(0, 923): MALLOC dst.dbg.spill.i8.i
	(0, 924): Wna (dst.dbg.spill.i8.i[0], 0x0)
	(0, 925): MALLOC pi5.i9.i
	(0, 926): Wna (pi5.i9.i[0], 0x0)
	(0, 927): Wna (pi5.i9.i[8], 0x0)
	(0, 928): Wna (pi5.i9.i[16], 0x0)
	(0, 929): Wna (pi5.i9.i[24], 0x0)
	(0, 930): Wna (pi5.i9.i[32], 0x0)
	(0, 931): Wna (pi5.i9.i[40], 0x0)
	(0, 932): Wna (pi5.i9.i[48], 0x0)
	(0, 933): Wna (pi5.i9.i[56], 0x0)
	(0, 934): MALLOC pi.i10.i
	(0, 935): Wna (pi.i10.i[0], 0x0)
	(0, 936): Wna (pi.i10.i[8], 0x0)
	(0, 937): Wna (pi.i10.i[16], 0x0)
	(0, 938): Wna (pi.i10.i[24], 0x0)
	(0, 939): Wna (pi.i10.i[32], 0x0)
	(0, 940): Wna (pi.i10.i[40], 0x0)
	(0, 941): Wna (pi.i10.i[48], 0x0)
	(0, 942): Wna (pi.i10.i[56], 0x0)
	(0, 943): MALLOC fmt4.i11.i
	(0, 944): Wna (fmt4.i11.i[0], 0x0)
	(0, 945): Wna (fmt4.i11.i[8], 0x0)
	(0, 946): Wna (fmt4.i11.i[16], 0x0)
	(0, 947): Wna (fmt4.i11.i[24], 0x0)
	(0, 948): Wna (fmt4.i11.i[32], 0x0)
	(0, 949): Wna (fmt4.i11.i[40], 0x0)
	(0, 950): MALLOC fmt.i12.i
	(0, 951): Wna (fmt.i12.i[0], 0x0)
	(0, 952): Wna (fmt.i12.i[8], 0x0)
	(0, 953): Wna (fmt.i12.i[16], 0x0)
	(0, 954): Wna (fmt.i12.i[24], 0x0)
	(0, 955): Wna (fmt.i12.i[32], 0x0)
	(0, 956): Wna (fmt.i12.i[40], 0x0)
	(0, 957): MALLOC _8.i13.i
	(0, 958): Wna (, 0x0)
	(0, 959): Wna (, 0x0)
	(0, 960): MALLOC _0.i14.i
	(0, 961): Wna (, 0x0)
	(0, 962): Wna (, 0x0)
	(0, 963): MALLOC failure.i.i
	(0, 964): MALLOC success.i.i
	(0, 965): MALLOC force_no_backtrace.dbg.spill3.i15.i
	(0, 966): MALLOC can_unwind.dbg.spill2.i16.i
	(0, 967): MALLOC force_no_backtrace.dbg.spill.i17.i
	(0, 968): MALLOC can_unwind.dbg.spill.i18.i
	(0, 969): MALLOC pieces.dbg.spill1.i19.i
	(0, 970): Wna (pieces.dbg.spill1.i19.i[0], 0x0)
	(0, 971): MALLOC pieces.dbg.spill.i20.i
	(0, 972): Wna (pieces.dbg.spill.i20.i[0], 0x0)
	(0, 973): MALLOC 
	(0, 974): Wna (, 0x0)
	(0, 975): MALLOC 
	(0, 976): Wna (, 0x0)
	(0, 977): MALLOC dst.dbg.spill.i.i
	(0, 978): Wna (dst.dbg.spill.i.i[0], 0x0)
	(0, 979): MALLOC pi5.i.i
	(0, 980): Wna (pi5.i.i[0], 0x0)
	(0, 981): Wna (pi5.i.i[8], 0x0)
	(0, 982): Wna (pi5.i.i[16], 0x0)
	(0, 983): Wna (pi5.i.i[24], 0x0)
	(0, 984): Wna (pi5.i.i[32], 0x0)
	(0, 985): Wna (pi5.i.i[40], 0x0)
	(0, 986): Wna (pi5.i.i[48], 0x0)
	(0, 987): Wna (pi5.i.i[56], 0x0)
	(0, 988): MALLOC pi.i.i
	(0, 989): Wna (pi.i.i[0], 0x0)
	(0, 990): Wna (pi.i.i[8], 0x0)
	(0, 991): Wna (pi.i.i[16], 0x0)
	(0, 992): Wna (pi.i.i[24], 0x0)
	(0, 993): Wna (pi.i.i[32], 0x0)
	(0, 994): Wna (pi.i.i[40], 0x0)
	(0, 995): Wna (pi.i.i[48], 0x0)
	(0, 996): Wna (pi.i.i[56], 0x0)
	(0, 997): MALLOC fmt4.i.i
	(0, 998): Wna (fmt4.i.i[0], 0x0)
	(0, 999): Wna (fmt4.i.i[8], 0x0)
	(0, 1000): Wna (fmt4.i.i[16], 0x0)
	(0, 1001): Wna (fmt4.i.i[24], 0x0)
	(0, 1002): Wna (fmt4.i.i[32], 0x0)
	(0, 1003): Wna (fmt4.i.i[40], 0x0)
	(0, 1004): MALLOC fmt.i.i
	(0, 1005): Wna (fmt.i.i[0], 0x0)
	(0, 1006): Wna (fmt.i.i[8], 0x0)
	(0, 1007): Wna (fmt.i.i[16], 0x0)
	(0, 1008): Wna (fmt.i.i[24], 0x0)
	(0, 1009): Wna (fmt.i.i[32], 0x0)
	(0, 1010): Wna (fmt.i.i[40], 0x0)
	(0, 1011): MALLOC _0.i.i
	(0, 1012): Wna (, 0x0)
	(0, 1013): MALLOC order.i.i
	(0, 1014): MALLOC force_no_backtrace.dbg.spill3.i.i
	(0, 1015): MALLOC can_unwind.dbg.spill2.i.i
	(0, 1016): MALLOC force_no_backtrace.dbg.spill.i.i
	(0, 1017): MALLOC can_unwind.dbg.spill.i.i
	(0, 1018): MALLOC pieces.dbg.spill1.i.i
	(0, 1019): Wna (pieces.dbg.spill1.i.i[0], 0x0)
	(0, 1020): MALLOC pieces.dbg.spill.i.i
	(0, 1021): Wna (pieces.dbg.spill.i.i[0], 0x0)
	(0, 1022): MALLOC 
	(0, 1023): MALLOC self.i1.i
	(0, 1024): Wna (self.i1.i[0], 0x0)
	(0, 1025): MALLOC _10.i.i
	(0, 1026): Wna (, 0x0)
	(0, 1027): MALLOC _8.i.i
	(0, 1028): Wna (, 0x0)
	(0, 1029): Wna (, 0x0)
	(0, 1030): MALLOC _6.i.i
	(0, 1031): Wna (, 0x0)
	(0, 1032): Wna (, 0x0)
	(0, 1033): MALLOC _3.i.i
	(0, 1034): Wna (, 0x0)
	(0, 1035): MALLOC last.i.i
	(0, 1036): Wna (last.i.i[0], 0x0)
	(0, 1037): MALLOC this.i.i
	(0, 1038): Wna (this.i.i[0], 0x0)
	(0, 1039): MALLOC _26.i.i
	(0, 1040): MALLOC arc.i.i
	(0, 1041): Wna (arc.i.i[0], 0x0)
	(0, 1042): MALLOC _1.i
	(0, 1043): Wna (_1.i[0], 0x0) mod.rs:1387
	(0, 1044): Wna (_1.i[8], 0x0) mod.rs:1387
	(0, 1045): Wna (_1.i[16], 0x0) mod.rs:1387
	(0, 1046): Wna (_1.i[0], 2) mod.rs:1387
	(0, 1047): MALLOC _2.i1
	(0, 1048): Wna (, 0x0)
	(0, 1049): MALLOC 
	(0, 1050): Wna (, 0x0)
	(0, 1051): MALLOC pi.i.i
	(0, 1052): Wna (pi.i.i[0], 0x0)
	(0, 1053): Wna (pi.i.i[8], 0x0)
	(0, 1054): Wna (pi.i.i[16], 0x0)
	(0, 1055): Wna (pi.i.i[24], 0x0)
	(0, 1056): Wna (pi.i.i[32], 0x0)
	(0, 1057): Wna (pi.i.i[40], 0x0)
	(0, 1058): Wna (pi.i.i[48], 0x0)
	(0, 1059): Wna (pi.i.i[56], 0x0)
	(0, 1060): MALLOC _19.i.i
	(0, 1061): Wna (, 0x0)
	(0, 1062): Wna (, 0x0)
	(0, 1063): MALLOC _12.i.i
	(0, 1064): Wna (, 0x0)
	(0, 1065): Wna (, 0x0)
	(0, 1066): MALLOC _6.i.i
	(0, 1067): Wna (, 0x0)
	(0, 1068): Wna (, 0x0)
	(0, 1069): Wna (, 0x0)
	(0, 1070): Wna (, 0x0)
	(0, 1071): MALLOC fmt.i.i
	(0, 1072): Wna (fmt.i.i[0], 0x0)
	(0, 1073): Wna (fmt.i.i[8], 0x0)
	(0, 1074): Wna (fmt.i.i[16], 0x0)
	(0, 1075): Wna (fmt.i.i[24], 0x0)
	(0, 1076): Wna (fmt.i.i[32], 0x0)
	(0, 1077): Wna (fmt.i.i[40], 0x0)
	(0, 1078): MALLOC error.i.i
	(0, 1079): Wna (error.i.i[0], 0x0)
	(0, 1080): Wna (error.i.i[8], 0x0)
	(0, 1081): MALLOC msg.i.i
	(0, 1082): Wna (msg.i.i[0], 0x0)
	(0, 1083): Wna (msg.i.i[8], 0x0)
	(0, 1084): MALLOC e.i
	(0, 1085): MALLOC _11.i
	(0, 1086): Wna (, 0x0)
	(0, 1087): MALLOC _6.i
	(0, 1088): Wna (, 0x0)
	(0, 1089): Wna (, 0x0)
	(0, 1090): MALLOC _4.i
	(0, 1091): Wna (_4.i[0], 0x0)
	(0, 1092): Wna (_4.i[8], 0x0)
	(0, 1093): Wna (_4.i[16], 0x0)
	(0, 1094): MALLOC _3.i
	(0, 1095): Wna (_3.i[0], 0x0)
	(0, 1096): Wna (_3.i[8], 0x0)
	(0, 1097): Wna (_3.i[16], 0x0)
	(0, 1098): MALLOC val
	(0, 1099): Wna (val[0], 0x0)
	(0, 1100): MALLOC _21
	(0, 1101): Wna (, 0x0)
	(0, 1102): MALLOC self
	(0, 1103): Wna (self[0], 0x0)
	(0, 1104): Wna (self[8], 0x0)
	(0, 1105): MALLOC layout
	(0, 1106): Wna (layout[0], 0x0) layout.rs:122
	(0, 1107): Wna (layout[8], 0x0) layout.rs:122
	(0, 1108): Wna (, 8) layout.rs:122
	(0, 1109): Wna (, 16) layout.rs:122
	(0, 1110): MALLOC _9.i
	(0, 1111): MALLOC _4.i
	(0, 1112): MALLOC _0.i
	(0, 1113): Wna (, 0x0)
	(0, 1114): MALLOC v2.i
	(0, 1115): Wna (v2.i[0], 0x0)
	(0, 1116): MALLOC v1.i
	(0, 1117): Wna (v1.i[0], 0x0)
	(0, 1118): MALLOC 
	(0, 1119): MALLOC 
	(0, 1120): MALLOC _51
	(0, 1121): Wna (, 0x0)
	(0, 1122): MALLOC _23
	(0, 1123): Wna (, 0x0)
	(0, 1124): MALLOC _22
	(0, 1125): Wna (, 0x0)
	(0, 1126): Wna (, 0x0)
	(0, 1127): Wna (, 0x0)
	(0, 1128): MALLOC self19
	(0, 1129): Wna (self19[0], 0x0)
	(0, 1130): Wna (self19[8], 0x0)
	(0, 1131): MALLOC _19
	(0, 1132): Wna (, 0x0)
	(0, 1133): Wna (, 0x0)
	(0, 1134): MALLOC self18
	(0, 1135): Wna (self18[0], 0x0)
	(0, 1136): Wna (self18[8], 0x0)
	(0, 1137): MALLOC self17
	(0, 1138): Wna (self17[0], 0x0)
	(0, 1139): Wna (self17[8], 0x0)
	(0, 1140): MALLOC _13
	(0, 1141): Wna (, 0x0)
	(0, 1142): Wna (, 0x0)
	(0, 1143): MALLOC self16
	(0, 1144): Wna (self16[0], 0x0)
	(0, 1145): Wna (self16[8], 0x0)
	(0, 1146): MALLOC self15
	(0, 1147): Wna (self15[0], 0x0)
	(0, 1148): Wna (self15[8], 0x0)
	(0, 1149): MALLOC _9
	(0, 1150): Wna (, 0x0)
	(0, 1151): Wna (, 0x0)
	(0, 1152): MALLOC next
	(0, 1153): Wna (next[0], 0x0) mod.rs:768
	(0, 1154): Wna (next[8], 0x0) mod.rs:768
	(0, 1155): Wna (next[0], 8) mod.rs:768
	(0, 1156): Wna (next[8], 40) mod.rs:768
	(0, 1157): Rna (, 8) [(0, 1108)] layout.rs:383
	(0, 1158): Rna (next[0], 8) [(0, 1155)] layout.rs:383
	(0, 1159): Wna (v1.i[0], 8)
	(0, 1160): Wna (v2.i[0], 8)
	(0, 1161): Wna (, 1) cmp.rs:1356
	(0, 1162): MALLOC _2
	(0, 1163): Wna (_2[0], 0x0)
	(0, 1164): Wna (_2[8], 0x0)
	(0, 1165): Wna (_2[0], 0x4000000000001b50)
	(0, 1166): Wna (_2[8], 0x4000000000001b40)
	(0, 1167): Rna (_2[0], 0x4000000000001b50) [(0, 1165)] function.rs:251
	(0, 1168): Rna (_2[8], 0x4000000000001b40) [(0, 1166)] function.rs:251
	(0, 1169): MALLOC _27
	(0, 1170): Wna (, 0x0)
	(0, 1171): MALLOC _22
	(0, 1172): Wna (, 0x0)
	(0, 1173): MALLOC _17
	(0, 1174): Wna (, 0x0)
	(0, 1175): MALLOC _12
	(0, 1176): Wna (, 0x0)
	(0, 1177): MALLOC _8
	(0, 1178): Wna (, 0x0)
	(0, 1179): MALLOC _4
	(0, 1180): Wna (, 0x0) alignment.rs:209
	(0, 1181): Rna (v1.i[0], 8) [(0, 1159)] alignment.rs:209
	(0, 1182): Wna (, 8) alignment.rs:97
	(0, 1183): Rna (, 8) [(0, 1182)] alignment.rs:97
	(0, 1184): Wna (, 8) nonzero.rs:359
	(0, 1185): Rna (, 8) [(0, 1184)] nonzero.rs:373
	(0, 1186): Rna (, 8) [(0, 1184)] nonzero.rs:374
	(0, 1187): Wna (, 8) nonzero.rs:446
	(0, 1188): Rna (v2.i[0], 8) [(0, 1160)] alignment.rs:209
	(0, 1189): Wna (, 8) alignment.rs:97
	(0, 1190): Rna (, 8) [(0, 1189)] alignment.rs:97
	(0, 1191): Wna (, 8) nonzero.rs:359
	(0, 1192): Rna (, 8) [(0, 1191)] nonzero.rs:373
	(0, 1193): Rna (, 8) [(0, 1191)] nonzero.rs:374
	(0, 1194): Wna (, 8) nonzero.rs:446
	(0, 1195): Rna (, 8) [(0, 1187)] cmp.rs:1576
	(0, 1196): Rna (, 8) [(0, 1194)] cmp.rs:1576
	(0, 1197): FREE alignment.rs:210
	(0, 1198): FREE
	(0, 1199): FREE
	(0, 1200): FREE
	(0, 1201): FREE
	(0, 1202): FREE
	(0, 1203): FREE function.rs:251
	(0, 1204): Wna (, 0) cmp.rs:1356
	(0, 1205): Rna (, 0) [(0, 1204)] cmp.rs:1356
	(0, 1206): Rna (v2.i[0], 8) [(0, 1160)] cmp.rs:1357
	(0, 1207): Wna (, 8) cmp.rs:1357
	(0, 1208): Rna (, 1) [(0, 1161)] cmp.rs:1360
	(0, 1209): Rna (, 8) [(0, 1207)] cmp.rs:1360
	(0, 1210): Wna (, 8) alignment.rs:97
	(0, 1211): Rna (, 8) [(0, 1210)] alignment.rs:97
	(0, 1212): Rna (, 16) [(0, 1109)] layout.rs:131
	(0, 1213): Wna (, 0) mod.rs:24
	(0, 1214): Rna (, 0) [(0, 1213)] mod.rs:24
	(0, 1215): Wna (self16[8], 16) uint_macros.rs:468
	(0, 1216): Rna (self16[8], 16) [(0, 1215)] option.rs:1246
	(0, 1217): Wna (self15[8], 16) option.rs:1246
	(0, 1218): Rna (self15[8], 16) [(0, 1217)] result.rs:1977
	(0, 1219): Wna (, 16) result.rs:1977
	(0, 1220): Rna (, 16) [(0, 1219)] layout.rs:386
	(0, 1221): Rna (next[8], 40) [(0, 1156)] layout.rs:131
	(0, 1222): Wna (, 0) mod.rs:24
	(0, 1223): Rna (, 0) [(0, 1222)] mod.rs:24
	(0, 1224): Wna (self18[8], 56) uint_macros.rs:468
	(0, 1225): Rna (self18[8], 56) [(0, 1224)] option.rs:1246
	(0, 1226): Wna (self17[8], 56) option.rs:1246
	(0, 1227): Rna (self17[8], 56) [(0, 1226)] result.rs:1977
	(0, 1228): Wna (, 56) result.rs:1977
	(0, 1229): Rna (, 56) [(0, 1228)] layout.rs:387
	(0, 1230): Wna (, 8) alignment.rs:97
	(0, 1231): Rna (, 8) [(0, 1230)] alignment.rs:97
	(0, 1232): Wna (self19[0], 8) layout.rs:106
	(0, 1233): Wna (self19[8], 56) layout.rs:106
	(0, 1234): Rna (self19[0], 8) [(0, 1232)] result.rs:1977
	(0, 1235): Rna (self19[8], 56) [(0, 1233)] result.rs:1977
	(0, 1236): Wna (, 8) result.rs:1977
	(0, 1237): Wna (, 56) result.rs:1977
	(0, 1238): Rna (, 8) [(0, 1236)] layout.rs:390
	(0, 1239): Rna (, 56) [(0, 1237)] layout.rs:390
	(0, 1240): Wna (, 8) layout.rs:391
	(0, 1241): Wna (, 56) layout.rs:391
	(0, 1242): Wna (, 16) layout.rs:391
	(0, 1243): Rna (, 8) [(0, 1240)] layout.rs:391
	(0, 1244): Wna (_4.i[0], 8) layout.rs:391
	(0, 1245): Rna (, 56) [(0, 1241)] layout.rs:391
	(0, 1246): Wna (_4.i[8], 56) layout.rs:391
	(0, 1247): Rna (, 16) [(0, 1242)] layout.rs:391
	(0, 1248): Wna (_4.i[16], 16) layout.rs:391
	(0, 1249): FREE layout.rs:392
	(0, 1250): FREE
	(0, 1251): FREE
	(0, 1252): FREE
	(0, 1253): FREE
	(0, 1254): FREE
	(0, 1255): FREE
	(0, 1256): FREE
	(0, 1257): FREE
	(0, 1258): FREE
	(0, 1259): FREE
	(0, 1260): FREE
	(0, 1261): FREE
	(0, 1262): FREE
	(0, 1263): FREE
	(0, 1264): FREE
	(0, 1265): FREE
	(0, 1266): FREE
	(0, 1267): FREE
	(0, 1268): Rna (_4.i[0], 8) [(0, 1244)] result.rs:1100
	(0, 1269): Rna (_4.i[0], 8) [(0, 1244)] result.rs:1101
	(0, 1270): Wna (_3.i[0], 8) result.rs:1101
	(0, 1271): Rna (_4.i[8], 56) [(0, 1246)] result.rs:1101
	(0, 1272): Wna (_3.i[8], 56) result.rs:1101
	(0, 1273): Rna (_4.i[16], 16) [(0, 1248)] result.rs:1101
	(0, 1274): Wna (_3.i[16], 16) result.rs:1101
	(0, 1275): Rna (_3.i[0], 8) [(0, 1270)] layout.rs:144
	(0, 1276): Wna (, 8) alignment.rs:97
	(0, 1277): Rna (, 8) [(0, 1276)] alignment.rs:97
	(0, 1278): Rna (_3.i[8], 56) [(0, 1272)] layout.rs:131
	(0, 1279): Wna (layout[0], 8) sync.rs:1891
	(0, 1280): Wna (layout[8], 56) sync.rs:1891
	(0, 1281): Rna (layout[0], 8) [(0, 1279)] sync.rs:1893
	(0, 1282): Rna (layout[8], 56) [(0, 1280)] sync.rs:1893
	(0, 1283): MALLOC _48
	(0, 1284): Wna (, 0x0)
	(0, 1285): MALLOC ptr
	(0, 1286): Wna (ptr[0], 0x0)
	(0, 1287): Wna (ptr[8], 0x0)
	(0, 1288): MALLOC _21
	(0, 1289): Wna (, 0x0)
	(0, 1290): MALLOC self7
	(0, 1291): Wna (self7[0], 0x0)
	(0, 1292): MALLOC self6
	(0, 1293): Wna (self6[0], 0x0)
	(0, 1294): MALLOC _12
	(0, 1295): Wna (, 0x0)
	(0, 1296): MALLOC raw_ptr
	(0, 1297): Wna (raw_ptr[0], 0x0)
	(0, 1298): MALLOC _0
	(0, 1299): Wna (, 0x0)
	(0, 1300): Wna (, 0x0)
	(0, 1301): MALLOC layout
	(0, 1302): Wna (layout[0], 0x0) mod.rs:768
	(0, 1303): Wna (layout[8], 0x0) mod.rs:768
	(0, 1304): Wna (layout[0], 8) mod.rs:768
	(0, 1305): Wna (layout[8], 56) mod.rs:768
	(0, 1306): Rna (layout[8], 56) [(0, 1305)] layout.rs:131
	(0, 1307): Rna (layout[0], 8) [(0, 1304)] layout.rs:144
	(0, 1308): Wna (, 8) alignment.rs:97
	(0, 1309): Rna (, 8) [(0, 1308)] alignment.rs:97
	(0, 1310): MALLOC  alloc.rs:100
	(0, 1311): Wna (raw_ptr[0], 0x30) alloc.rs:100
	(0, 1312): Rna (raw_ptr[0], 0x30) [(0, 1311)] alloc.rs:184
	(0, 1313): Wna (self7[0], 0x30) non_null.rs:249
	(0, 1314): Rna (self7[0], 0x30) [(0, 1313)] option.rs:1246
	(0, 1315): Wna (self6[0], 0x30) option.rs:1246
	(0, 1316): Rna (self6[0], 0x30) [(0, 1315)] result.rs:1977
	(0, 1317): Wna (, 0x30) result.rs:1977
	(0, 1318): Rna (, 0x30) [(0, 1317)] alloc.rs:184
	(0, 1319): Wna (, 0x30) alloc.rs:185
	(0, 1320): Wna (, 56) alloc.rs:185
	(0, 1321): Rna (, 0x30) [(0, 1319)] alloc.rs:188
	(0, 1322): Rna (, 56) [(0, 1320)] alloc.rs:188
	(0, 1323): FREE alloc.rs:188
	(0, 1324): FREE
	(0, 1325): FREE
	(0, 1326): FREE
	(0, 1327): FREE
	(0, 1328): FREE
	(0, 1329): FREE
	(0, 1330): FREE
	(0, 1331): FREE
	(0, 1332): Wna (self[0], 0x30) sync.rs:1893
	(0, 1333): Wna (self[8], 56) sync.rs:1893
	(0, 1334): Rna (self[0], 0x30) [(0, 1332)] result.rs:1454
	(0, 1335): Rna (self[0], 0x30) [(0, 1332)] result.rs:1455
	(0, 1336): Wna (, 0x30)
	(0, 1337): Rna (, 0x30) [(0, 1336)] function.rs:251
	(0, 1338): Wna (val[0], 1) atomic.rs:2194
	(0, 1339): Rna (val[0], 1) [(0, 1338)] mod.rs:1535
	(0, 1340): Wna (, 1) mod.rs:1535
	(0, 1341): Rna (val[0], 1) [(0, 1338)] mod.rs:1535
	(0, 1342): Wna (, 1) mod.rs:1535
	(0, 1343): FREE sync.rs:1896
	(0, 1344): FREE
	(0, 1345): FREE
	(0, 1346): FREE
	(0, 1347): FREE
	(0, 1348): FREE
	(0, 1349): FREE
	(0, 1350): FREE
	(0, 1351): FREE
	(0, 1352): FREE
	(0, 1353): FREE
	(0, 1354): FREE
	(0, 1355): FREE
	(0, 1356): FREE
	(0, 1357): FREE
	(0, 1358): FREE
	(0, 1359): FREE
	(0, 1360): FREE
	(0, 1361): Wna (arc.i.i[0], 0x30) sync.rs:284
	(0, 1362): Rna (arc.i.i[0], 0x30) [(0, 1361)] sync.rs:2426
	(0, 1363): Rna (_1.i[0], 2) [(0, 1046)] mod.rs:1535
	(0, 1364): Wna (, 2) mod.rs:1535
	(0, 1365): Rna (_1.i[0], 2) [(0, 1046)] mod.rs:1535
	(0, 1366): Wna (, 2) mod.rs:1535
	(0, 1367): Rna (_1.i[0], 2) [(0, 1046)] mod.rs:1535
	(0, 1368): Wna (, 2) mod.rs:1535
	(0, 1369): Wna (, 0) mod.rs:1243
	(0, 1370): Wna (, 0) mod.rs:1243
	(0, 1371): Wna (, 0) mod.rs:1243
	(0, 1372): Wna (, 0) mod.rs:1243
	(0, 1373): Wna (, 0) mod.rs:1243
	(0, 1374): Wna (, 0) mod.rs:1243
	(0, 1375): Wna (, 0) mod.rs:1243
	(0, 1376): Wna (, 0) mod.rs:1243
	(0, 1377): Wna (pieces.dbg.spill.i.i[0], 0x8000000000000718) mod.rs:340
	(0, 1378): Wna (pieces.dbg.spill1.i.i[0], 0x8000000000000758) mod.rs:340
	(0, 1379): Wna (can_unwind.dbg.spill.i.i[0], 1) panic_info.rs:37
	(0, 1380): Wna (force_no_backtrace.dbg.spill.i.i[0], 0) panic_info.rs:38
	(0, 1381): Wna (can_unwind.dbg.spill2.i.i[0], 1) panic_info.rs:37
	(0, 1382): Wna (force_no_backtrace.dbg.spill3.i.i[0], 0) panic_info.rs:38
	(0, 1383): Wna (order.i.i[0], 0) panic_info.rs:38
	(0, 1384): Wna (dst.dbg.spill.i.i[0], 0x40000000000018f8) panic_info.rs:38
	(0, 1385): Rna (order.i.i[0], 0) [(0, 1383)] atomic.rs:3312
	(0, 1386): Rrlx (, 0) [(0, 1376)(0, 1034)] atomic.rs:3313
	(0, 1387): Wna (, 0) atomic.rs:3313
	(0, 1388): Rna (, 0) [(0, 1387)] atomic.rs:3320
	(0, 1389): Wna (last.i.i[0], 0) atomic.rs:2421
	(0, 1390): LOOP_BEGIN mod.rs:24
	(0, 1391): SPIN_START
	(0, 1392): Rna (last.i.i[0], 0) [(0, 1389)] mod.rs:1245
	(0, 1393): Wna (, 0) mod.rs:24
	(0, 1394): Rna (, 0) [(0, 1393)] mod.rs:24
	(0, 1395): Wna (, 1) uint_macros.rs:468
	(0, 1396): Rna (, 1) [(0, 1395)] mod.rs:1245
	(0, 1397): Wna (, 0) mod.rs:1249
	(0, 1398): Wna (, 0) mod.rs:1249
	(0, 1399): Wna (, 0) mod.rs:1249
	(0, 1400): Wna (, 0) mod.rs:1249
	(0, 1401): Wna (, 0) mod.rs:1249
	(0, 1402): Wna (, 0) mod.rs:1249
	(0, 1403): Wna (, 0) mod.rs:1249
	(0, 1404): Wna (, 0) mod.rs:1249
	(0, 1405): Rna (last.i.i[0], 0) [(0, 1389)] mod.rs:1249
	(0, 1406): Wna (pieces.dbg.spill.i20.i[0], 0x80000000000008e8) mod.rs:340
	(0, 1407): Wna (pieces.dbg.spill1.i19.i[0], 0x8000000000000938) mod.rs:340
	(0, 1408): Wna (can_unwind.dbg.spill.i18.i[0], 1) panic_info.rs:37
	(0, 1409): Wna (force_no_backtrace.dbg.spill.i17.i[0], 0) panic_info.rs:38
	(0, 1410): Wna (can_unwind.dbg.spill2.i16.i[0], 1) panic_info.rs:37
	(0, 1411): Wna (force_no_backtrace.dbg.spill3.i15.i[0], 0) panic_info.rs:38
	(0, 1412): Wna (success.i.i[0], 0) panic_info.rs:38
	(0, 1413): Wna (failure.i.i[0], 0) panic_info.rs:38
	(0, 1414): Wna (dst.dbg.spill.i8.i[0], 0x40000000000018c0) panic_info.rs:38
	(0, 1415): Wna (old.dbg.spill.i.i[0], 0) panic_info.rs:38
	(0, 1416): Wna (new.dbg.spill.i.i[0], 1) panic_info.rs:38
	(0, 1417): Rna (success.i.i[0], 0) [(0, 1412)] atomic.rs:3419
	(0, 1418): Rna (failure.i.i[0], 0) [(0, 1413)] atomic.rs:3419
	(0, 1419): CRrlx (, 0) [(0, 1404)(0, 1026)] atomic.rs:3420
	(0, 1420): CWrlx (, 1)
	(0, 1421): Wna (, 0) atomic.rs:3420
	(0, 1422): Wna (, 1) atomic.rs:3420
	(0, 1423): Rna (, 0) [(0, 1421)] atomic.rs:3418
	(0, 1424): Rna (, 1) [(0, 1422)] atomic.rs:3418
	(0, 1425): Wna (, 0) atomic.rs:3439
	(0, 1426): Wna (, 0) atomic.rs:3439
	(0, 1427): Rna (, 0) [(0, 1426)] atomic.rs:3440
	(0, 1428): Rna (, 0) [(0, 1425)] atomic.rs:3440
	(0, 1429): Wna (, 0) atomic.rs:2642
	(0, 1430): Wna (, 0) atomic.rs:2642
	(0, 1431): Rna (, 0) [(0, 1429)] mod.rs:1249
	(0, 1432): Wna (self.i1.i[0], 1) nonzero.rs:359
	(0, 1433): Rna (self.i1.i[0], 1) [(0, 1432)] option.rs:968
	(0, 1434): Rna (self.i1.i[0], 1) [(0, 1432)] option.rs:969
	(0, 1435): Wna (, 1) mod.rs:1535
	(0, 1436): Wna (_26.i.i[0], 0) atomic.rs:2194
	(0, 1437): Rna (_26.i.i[0], 0) [(0, 1436)] mod.rs:1535
	(0, 1438): Wna (, 0) mod.rs:1535
	(0, 1439): Rna (arc.i.i[0], 0x30) [(0, 1361)] mod.rs:1407
	(0, 1440): Wna (this.i.i[0], 0x30) manually_drop.rs:74
	(0, 1441): Rna (this.i.i[0], 0x30) [(0, 1440)] sync.rs:279
	(0, 1442): FREE function.rs:251
	(0, 1443): FREE
	(0, 1444): FREE
	(0, 1445): FREE
	(0, 1446): FREE
	(0, 1447): FREE
	(0, 1448): FREE
	(0, 1449): FREE
	(0, 1450): FREE
	(0, 1451): FREE
	(0, 1452): FREE
	(0, 1453): FREE
	(0, 1454): FREE
	(0, 1455): FREE
	(0, 1456): FREE
	(0, 1457): FREE
	(0, 1458): FREE
	(0, 1459): FREE
	(0, 1460): FREE
	(0, 1461): FREE
	(0, 1462): FREE
	(0, 1463): FREE
	(0, 1464): FREE
	(0, 1465): FREE
	(0, 1466): FREE
	(0, 1467): FREE
	(0, 1468): FREE
	(0, 1469): FREE
	(0, 1470): FREE
	(0, 1471): FREE
	(0, 1472): FREE
	(0, 1473): FREE
	(0, 1474): FREE
	(0, 1475): FREE
	(0, 1476): FREE
	(0, 1477): FREE
	(0, 1478): FREE
	(0, 1479): FREE
	(0, 1480): FREE
	(0, 1481): FREE
	(0, 1482): FREE
	(0, 1483): FREE
	(0, 1484): FREE
	(0, 1485): FREE
	(0, 1486): FREE
	(0, 1487): FREE
	(0, 1488): FREE
	(0, 1489): FREE
	(0, 1490): Wna (, 0x30) option.rs:1217
	(0, 1491): Rna (, 0x30) [(0, 1490)] option.rs:1219
	(0, 1492): Wna (my_thread.i[0], 0x30) mod.rs:480
	(0, 1493): Wna (self.dbg.spill.i[0], 0x40000000000013a8) mod.rs:481
	(0, 1494): Wna (self.dbg.spill23.i[0], 0x40000000000013a8) mod.rs:1355
	(0, 1495): Wna (self.dbg.spill24.i[0], 0x40000000000013a8) pin.rs:1089
	(0, 1496): Wna (self.dbg.spill25.i[0], 0x40000000000013a8) sync.rs:1837
	(0, 1497): Rna (my_thread.i[0], 0x30) [(0, 1492)] non_null.rs:402
	(0, 1498): Wna (self.dbg.spill27.i[0], 0x30) non_null.rs:402
	(0, 1499): Wna (self.dbg.spill28.i[0], 0x30) non_null.rs:351
	(0, 1500): Wna (self.dbg.spill29.i[0], 0x30) sync.rs:2117
	(0, 1501): Wna (self.dbg.spill30.i[0], 0x30) atomic.rs:2673
	(0, 1502): Wna (dst.dbg.spill.i[0], 0x30) cell.rs:2148
	(0, 1503): URrlx (, 1) [(0, 1340)] atomic.rs:3346
	(0, 1504): UWrlx (, 2)
	(0, 1505): Wna (, 1) atomic.rs:3346
	(0, 1506): Wna (old_size.dbg.spill.i[0], 1) atomic.rs:3346
	(0, 1507): Rna (my_thread.i[0], 0x30) [(0, 1492)] sync.rs:2138
	(0, 1508): Wna (their_thread.i[0], 0x30) mod.rs:1355
	(0, 1509): Rna (scope_data.i[0], 0x0) [(0, 880)] mod.rs:484
	(0, 1510): Wna (value.i[0], 0) mod.rs:485
	(0, 1511): Wna (data.i[0], 0x0) mod.rs:483
	(0, 1512): Rna (value.i[0], 0) [(0, 1510)] mod.rs:483
	(0, 1513): Wna (data.i[8], 0) mod.rs:483
	(0, 1514): Rna (value.i[8], 0) [(0, 793)] mod.rs:483
	(0, 1515): Wna (data.i[16], 0) mod.rs:483
	(0, 1516): Rna (value.i[16], 0) [(0, 794)] mod.rs:483
	(0, 1517): Wna (data.i[24], 0) mod.rs:483
	(0, 1518): Wna (, 1) atomic.rs:2194
	(0, 1519): Rna (, 1) [(0, 1518)] sync.rs:390
	(0, 1520): Wna (_70.i[0], 1) sync.rs:390
	(0, 1521): Rna (, 1) [(0, 1518)] sync.rs:390
	(0, 1522): Wna (_70.i[8], 1) sync.rs:390
	(0, 1523): Rna (data.i[0], 0) [(0, 1511)] sync.rs:390
	(0, 1524): Wna (_70.i[16], 0) sync.rs:390
	(0, 1525): Rna (data.i[8], 0) [(0, 1513)] sync.rs:390
	(0, 1526): Wna (_70.i[24], 0) sync.rs:390
	(0, 1527): Rna (data.i[16], 0) [(0, 1515)] sync.rs:390
	(0, 1528): Wna (_70.i[32], 0) sync.rs:390
	(0, 1529): Rna (data.i[24], 0) [(0, 1517)] sync.rs:390
	(0, 1530): Wna (_70.i[40], 0) sync.rs:390
	(0, 1531): MALLOC _13
	(0, 1532): Wna (, 0x0)
	(0, 1533): MALLOC _4
	(0, 1534): Wna (, 0x0) alloc.rs:243
	(0, 1535): Wna (, 0x0) alloc.rs:243
	(0, 1536): MALLOC _48
	(0, 1537): Wna (, 0x0)
	(0, 1538): MALLOC ptr
	(0, 1539): Wna (ptr[0], 0x0)
	(0, 1540): Wna (ptr[8], 0x0)
	(0, 1541): MALLOC _21
	(0, 1542): Wna (, 0x0)
	(0, 1543): MALLOC self7
	(0, 1544): Wna (self7[0], 0x0)
	(0, 1545): MALLOC self6
	(0, 1546): Wna (self6[0], 0x0)
	(0, 1547): MALLOC _12
	(0, 1548): Wna (, 0x0)
	(0, 1549): MALLOC raw_ptr
	(0, 1550): Wna (raw_ptr[0], 0x0)
	(0, 1551): MALLOC _0
	(0, 1552): Wna (, 0x0)
	(0, 1553): Wna (, 0x0)
	(0, 1554): MALLOC layout
	(0, 1555): Wna (layout[0], 0x0) mod.rs:768
	(0, 1556): Wna (layout[8], 0x0) mod.rs:768
	(0, 1557): Wna (layout[0], 8) mod.rs:768
	(0, 1558): Wna (layout[8], 48) mod.rs:768
	(0, 1559): Rna (layout[8], 48) [(0, 1558)] layout.rs:131
	(0, 1560): Rna (layout[0], 8) [(0, 1557)] layout.rs:144
	(0, 1561): Wna (, 8) alignment.rs:97
	(0, 1562): Rna (, 8) [(0, 1561)] alignment.rs:97
	(0, 1563): MALLOC  alloc.rs:100
	(0, 1564): Wna (raw_ptr[0], 0x70) alloc.rs:100
	(0, 1565): Rna (raw_ptr[0], 0x70) [(0, 1564)] alloc.rs:184
	(0, 1566): Wna (self7[0], 0x70) non_null.rs:249
	(0, 1567): Rna (self7[0], 0x70) [(0, 1566)] option.rs:1246
	(0, 1568): Wna (self6[0], 0x70) option.rs:1246
	(0, 1569): Rna (self6[0], 0x70) [(0, 1568)] result.rs:1977
	(0, 1570): Wna (, 0x70) result.rs:1977
	(0, 1571): Rna (, 0x70) [(0, 1570)] alloc.rs:184
	(0, 1572): Wna (, 0x70) alloc.rs:185
	(0, 1573): Wna (, 48) alloc.rs:185
	(0, 1574): Rna (, 0x70) [(0, 1572)] alloc.rs:188
	(0, 1575): Rna (, 48) [(0, 1573)] alloc.rs:188
	(0, 1576): FREE alloc.rs:188
	(0, 1577): FREE
	(0, 1578): FREE
	(0, 1579): FREE
	(0, 1580): FREE
	(0, 1581): FREE
	(0, 1582): FREE
	(0, 1583): FREE
	(0, 1584): FREE
	(0, 1585): Wna (, 0x70) alloc.rs:243
	(0, 1586): Wna (, 48) alloc.rs:243
	(0, 1587): Rna (, 0x70) [(0, 1585)] alloc.rs:332
	(0, 1588): Rna (, 0x70) [(0, 1585)] alloc.rs:333
	(0, 1589): FREE alloc.rs:336
	(0, 1590): FREE
	(0, 1591): Rna (_70.i[0], 1) [(0, 1520)] boxed.rs:260
	(0, 1592): Wna (, 1) boxed.rs:260
	(0, 1593): Rna (_70.i[8], 1) [(0, 1522)] boxed.rs:260
	(0, 1594): Wna (, 1) boxed.rs:260
	(0, 1595): Rna (_70.i[16], 0) [(0, 1524)] boxed.rs:260
	(0, 1596): Wna (, 0) boxed.rs:260
	(0, 1597): Rna (_70.i[24], 0) [(0, 1526)] boxed.rs:260
	(0, 1598): Wna (, 0) boxed.rs:260
	(0, 1599): Rna (_70.i[32], 0) [(0, 1528)] boxed.rs:260
	(0, 1600): Wna (, 0) boxed.rs:260
	(0, 1601): Rna (_70.i[40], 0) [(0, 1530)] boxed.rs:260
	(0, 1602): Wna (, 0) boxed.rs:260
	(0, 1603): Wna (b.i[0], 0x70) manually_drop.rs:74
	(0, 1604): Rna (b.i[0], 0x70) [(0, 1603)] boxed.rs:1162
	(0, 1605): Wna (my_packet.i[0], 0x70) sync.rs:284
	(0, 1606): Rna (my_packet.i[0], 0x70) [(0, 1605)] non_null.rs:402
	(0, 1607): URrlx (, 1) [(0, 1592)] atomic.rs:3346
	(0, 1608): UWrlx (, 2)
	(0, 1609): Wna (, 1) atomic.rs:3346
	(0, 1610): Rna (, 1) [(0, 1609)] atomic.rs:3346
	(0, 1611): Rna (my_packet.i[0], 0x70) [(0, 1605)] sync.rs:2138
	(0, 1612): Wna (their_packet.i[0], 0x70) sync.rs:284
	(0, 1613): Wna (_sink.i[0], 0x0) stdio.rs:1071
	(0, 1614): Rna (_sink.i[0], 0x0) [(0, 1613)] mod.rs:543
	(0, 1615): MALLOC 
	(0, 1616): Wna (, 0x0)
	(0, 1617): MALLOC pi.i
	(0, 1618): Wna (pi.i[0], 0x0)
	(0, 1619): Wna (pi.i[8], 0x0)
	(0, 1620): Wna (pi.i[16], 0x0)
	(0, 1621): Wna (pi.i[24], 0x0)
	(0, 1622): Wna (pi.i[32], 0x0)
	(0, 1623): Wna (pi.i[40], 0x0)
	(0, 1624): Wna (pi.i[48], 0x0)
	(0, 1625): Wna (pi.i[56], 0x0)
	(0, 1626): MALLOC _19.i
	(0, 1627): Wna (, 0x0)
	(0, 1628): Wna (, 0x0)
	(0, 1629): MALLOC _12.i
	(0, 1630): Wna (, 0x0)
	(0, 1631): Wna (, 0x0)
	(0, 1632): MALLOC _6.i
	(0, 1633): Wna (, 0x0)
	(0, 1634): Wna (, 0x0)
	(0, 1635): Wna (, 0x0)
	(0, 1636): Wna (, 0x0)
	(0, 1637): MALLOC fmt.i
	(0, 1638): Wna (fmt.i[0], 0x0)
	(0, 1639): Wna (fmt.i[8], 0x0)
	(0, 1640): Wna (fmt.i[16], 0x0)
	(0, 1641): Wna (fmt.i[24], 0x0)
	(0, 1642): Wna (fmt.i[32], 0x0)
	(0, 1643): Wna (fmt.i[40], 0x0)
	(0, 1644): MALLOC error.i
	(0, 1645): Wna (error.i[0], 0x0)
	(0, 1646): Wna (error.i[8], 0x0)
	(0, 1647): MALLOC msg.i
	(0, 1648): Wna (msg.i[0], 0x0)
	(0, 1649): Wna (msg.i[8], 0x0)
	(0, 1650): MALLOC e
	(0, 1651): MALLOC self
	(0, 1652): Wna (self[0], 0x0)
	(0, 1653): Wna (self[8], 0x0)
	(0, 1654): Wna (self[0], 0)
	(0, 1655): Wna (self[8], 0x0)
	(0, 1656): Rna (self[0], 0) [(0, 1654)] result.rs:1057
	(0, 1657): Rna (self[8], 0x0) [(0, 1655)] result.rs:1058
	(0, 1658): FREE result.rs:1061
	(0, 1659): FREE
	(0, 1660): FREE
	(0, 1661): FREE
	(0, 1662): FREE
	(0, 1663): FREE
	(0, 1664): FREE
	(0, 1665): FREE
	(0, 1666): FREE
	(0, 1667): FREE
	(0, 1668): Wna (output_capture.i[0], 0x0) stdio.rs:1071
	(0, 1669): Rna (output_capture.i[0], 0x0) [(0, 1668)] option.rs:2044
	(0, 1670): Wna (sink.i[0], 0x0) option.rs:2046
	(0, 1671): Rna (sink.i[0], 0x0) [(0, 1670)] stdio.rs:1071
	(0, 1672): Wna (_sink21.i[0], 0x0) stdio.rs:1071
	(0, 1673): Rna (_sink21.i[0], 0x0) [(0, 1672)] mod.rs:543
	(0, 1674): MALLOC 
	(0, 1675): Wna (, 0x0)
	(0, 1676): MALLOC pi.i
	(0, 1677): Wna (pi.i[0], 0x0)
	(0, 1678): Wna (pi.i[8], 0x0)
	(0, 1679): Wna (pi.i[16], 0x0)
	(0, 1680): Wna (pi.i[24], 0x0)
	(0, 1681): Wna (pi.i[32], 0x0)
	(0, 1682): Wna (pi.i[40], 0x0)
	(0, 1683): Wna (pi.i[48], 0x0)
	(0, 1684): Wna (pi.i[56], 0x0)
	(0, 1685): MALLOC _19.i
	(0, 1686): Wna (, 0x0)
	(0, 1687): Wna (, 0x0)
	(0, 1688): MALLOC _12.i
	(0, 1689): Wna (, 0x0)
	(0, 1690): Wna (, 0x0)
	(0, 1691): MALLOC _6.i
	(0, 1692): Wna (, 0x0)
	(0, 1693): Wna (, 0x0)
	(0, 1694): Wna (, 0x0)
	(0, 1695): Wna (, 0x0)
	(0, 1696): MALLOC fmt.i
	(0, 1697): Wna (fmt.i[0], 0x0)
	(0, 1698): Wna (fmt.i[8], 0x0)
	(0, 1699): Wna (fmt.i[16], 0x0)
	(0, 1700): Wna (fmt.i[24], 0x0)
	(0, 1701): Wna (fmt.i[32], 0x0)
	(0, 1702): Wna (fmt.i[40], 0x0)
	(0, 1703): MALLOC error.i
	(0, 1704): Wna (error.i[0], 0x0)
	(0, 1705): Wna (error.i[8], 0x0)
	(0, 1706): MALLOC msg.i
	(0, 1707): Wna (msg.i[0], 0x0)
	(0, 1708): Wna (msg.i[8], 0x0)
	(0, 1709): MALLOC e
	(0, 1710): MALLOC self
	(0, 1711): Wna (self[0], 0x0)
	(0, 1712): Wna (self[8], 0x0)
	(0, 1713): Wna (self[0], 0)
	(0, 1714): Wna (self[8], 0x0)
	(0, 1715): Rna (self[0], 0) [(0, 1713)] result.rs:1057
	(0, 1716): Rna (self[8], 0x0) [(0, 1714)] result.rs:1058
	(0, 1717): FREE result.rs:1061
	(0, 1718): FREE
	(0, 1719): FREE
	(0, 1720): FREE
	(0, 1721): FREE
	(0, 1722): FREE
	(0, 1723): FREE
	(0, 1724): FREE
	(0, 1725): FREE
	(0, 1726): FREE
	(0, 1727): Wna (, 0x0) stdio.rs:1071
	(0, 1728): Rna (, 0x0) [(0, 1727)] mod.rs:543
	(0, 1729): Rna (f.i[0], 0x10) [(0, 879)] mod.rs:518
	(0, 1730): Wna (, 0x10) maybe_uninit.rs:287
	(0, 1731): Rna (, 0x10) [(0, 1730)] mod.rs:500
	(0, 1732): Rna (their_thread.i[0], 0x30) [(0, 1508)] mod.rs:519
	(0, 1733): Wna (main.i[0], 0x30) mod.rs:519
	(0, 1734): Rna (output_capture.i[0], 0x0) [(0, 1668)] mod.rs:519
	(0, 1735): Wna (main.i[16], 0x0) mod.rs:519
	(0, 1736): Wna (main.i[24], 0x10) mod.rs:519
	(0, 1737): Rna (their_packet.i[0], 0x70) [(0, 1612)] mod.rs:519
	(0, 1738): Wna (main.i[8], 0x70) mod.rs:519
	(0, 1739): Rna (my_packet.i[0], 0x70) [(0, 1605)] non_null.rs:402
	(0, 1740): Rna (, 0x0) [(0, 1596)] mod.rs:544
	(0, 1741): Rna (main.i[0], 48) [(0, 1733)] mod.rs:548
	(0, 1742): Wna (_31.i[0], 48) mod.rs:548
	(0, 1743): Rna (main.i[8], 112) [(0, 1738)] mod.rs:548
	(0, 1744): Wna (_31.i[8], 112) mod.rs:548
	(0, 1745): Rna (main.i[16], 0) [(0, 1735)] mod.rs:548
	(0, 1746): Wna (_31.i[16], 0) mod.rs:548
	(0, 1747): Rna (main.i[24], 16) [(0, 1736)] mod.rs:548
	(0, 1748): Wna (_31.i[24], 16) mod.rs:548
	(0, 1749): MALLOC _13
	(0, 1750): Wna (, 0x0)
	(0, 1751): MALLOC _4
	(0, 1752): Wna (, 0x0) alloc.rs:243
	(0, 1753): Wna (, 0x0) alloc.rs:243
	(0, 1754): MALLOC _48
	(0, 1755): Wna (, 0x0)
	(0, 1756): MALLOC ptr
	(0, 1757): Wna (ptr[0], 0x0)
	(0, 1758): Wna (ptr[8], 0x0)
	(0, 1759): MALLOC _21
	(0, 1760): Wna (, 0x0)
	(0, 1761): MALLOC self7
	(0, 1762): Wna (self7[0], 0x0)
	(0, 1763): MALLOC self6
	(0, 1764): Wna (self6[0], 0x0)
	(0, 1765): MALLOC _12
	(0, 1766): Wna (, 0x0)
	(0, 1767): MALLOC raw_ptr
	(0, 1768): Wna (raw_ptr[0], 0x0)
	(0, 1769): MALLOC _0
	(0, 1770): Wna (, 0x0)
	(0, 1771): Wna (, 0x0)
	(0, 1772): MALLOC layout
	(0, 1773): Wna (layout[0], 0x0) mod.rs:768
	(0, 1774): Wna (layout[8], 0x0) mod.rs:768
	(0, 1775): Wna (layout[0], 8) mod.rs:768
	(0, 1776): Wna (layout[8], 32) mod.rs:768
	(0, 1777): Rna (layout[8], 32) [(0, 1776)] layout.rs:131
	(0, 1778): Rna (layout[0], 8) [(0, 1775)] layout.rs:144
	(0, 1779): Wna (, 8) alignment.rs:97
	(0, 1780): Rna (, 8) [(0, 1779)] alignment.rs:97
	(0, 1781): MALLOC  alloc.rs:100
	(0, 1782): Wna (raw_ptr[0], 0xb0) alloc.rs:100
	(0, 1783): Rna (raw_ptr[0], 0xb0) [(0, 1782)] alloc.rs:184
	(0, 1784): Wna (self7[0], 0xb0) non_null.rs:249
	(0, 1785): Rna (self7[0], 0xb0) [(0, 1784)] option.rs:1246
	(0, 1786): Wna (self6[0], 0xb0) option.rs:1246
	(0, 1787): Rna (self6[0], 0xb0) [(0, 1786)] result.rs:1977
	(0, 1788): Wna (, 0xb0) result.rs:1977
	(0, 1789): Rna (, 0xb0) [(0, 1788)] alloc.rs:184
	(0, 1790): Wna (, 0xb0) alloc.rs:185
	(0, 1791): Wna (, 32) alloc.rs:185
	(0, 1792): Rna (, 0xb0) [(0, 1790)] alloc.rs:188
	(0, 1793): Rna (, 32) [(0, 1791)] alloc.rs:188
	(0, 1794): FREE alloc.rs:188
	(0, 1795): FREE
	(0, 1796): FREE
	(0, 1797): FREE
	(0, 1798): FREE
	(0, 1799): FREE
	(0, 1800): FREE
	(0, 1801): FREE
	(0, 1802): FREE
	(0, 1803): Wna (, 0xb0) alloc.rs:243
	(0, 1804): Wna (, 32) alloc.rs:243
	(0, 1805): Rna (, 0xb0) [(0, 1803)] alloc.rs:332
	(0, 1806): Rna (, 0xb0) [(0, 1803)] alloc.rs:333
	(0, 1807): FREE alloc.rs:336
	(0, 1808): FREE
	(0, 1809): Rna (_31.i[0], 48) [(0, 1742)] boxed.rs:260
	(0, 1810): Wna (, 48) boxed.rs:260
	(0, 1811): Rna (_31.i[8], 112) [(0, 1744)] boxed.rs:260
	(0, 1812): Wna (, 112) boxed.rs:260
	(0, 1813): Rna (_31.i[16], 0) [(0, 1746)] boxed.rs:260
	(0, 1814): Wna (, 0) boxed.rs:260
	(0, 1815): Rna (_31.i[24], 16) [(0, 1748)] boxed.rs:260
	(0, 1816): Wna (, 16) boxed.rs:260
	(0, 1817): Wna (b22.i[0], 0xb0) manually_drop.rs:74
	(0, 1818): Rna (b22.i[0], 0xb0) [(0, 1817)] boxed.rs:1162
	(0, 1819): Rna (stack_size19.i[0], 2097152) [(0, 894)] mod.rs:568
	(0, 1820): Wna (x.i21[0], 0xb0)
	(0, 1821): Wna (x.i21[8], 0x8000000000000308)
	(0, 1822): MALLOC _13
	(0, 1823): Wna (, 0x0)
	(0, 1824): MALLOC _4
	(0, 1825): Wna (, 0x0) alloc.rs:243
	(0, 1826): Wna (, 0x0) alloc.rs:243
	(0, 1827): MALLOC _48
	(0, 1828): Wna (, 0x0)
	(0, 1829): MALLOC ptr
	(0, 1830): Wna (ptr[0], 0x0)
	(0, 1831): Wna (ptr[8], 0x0)
	(0, 1832): MALLOC _21
	(0, 1833): Wna (, 0x0)
	(0, 1834): MALLOC self7
	(0, 1835): Wna (self7[0], 0x0)
	(0, 1836): MALLOC self6
	(0, 1837): Wna (self6[0], 0x0)
	(0, 1838): MALLOC _12
	(0, 1839): Wna (, 0x0)
	(0, 1840): MALLOC raw_ptr
	(0, 1841): Wna (raw_ptr[0], 0x0)
	(0, 1842): MALLOC _0
	(0, 1843): Wna (, 0x0)
	(0, 1844): Wna (, 0x0)
	(0, 1845): MALLOC layout
	(0, 1846): Wna (layout[0], 0x0) mod.rs:768
	(0, 1847): Wna (layout[8], 0x0) mod.rs:768
	(0, 1848): Wna (layout[0], 8) mod.rs:768
	(0, 1849): Wna (layout[8], 16) mod.rs:768
	(0, 1850): Rna (layout[8], 16) [(0, 1849)] layout.rs:131
	(0, 1851): Rna (layout[0], 8) [(0, 1848)] layout.rs:144
	(0, 1852): Wna (, 8) alignment.rs:97
	(0, 1853): Rna (, 8) [(0, 1852)] alignment.rs:97
	(0, 1854): MALLOC  alloc.rs:100
	(0, 1855): Wna (raw_ptr[0], 0xe0) alloc.rs:100
	(0, 1856): Rna (raw_ptr[0], 0xe0) [(0, 1855)] alloc.rs:184
	(0, 1857): Wna (self7[0], 0xe0) non_null.rs:249
	(0, 1858): Rna (self7[0], 0xe0) [(0, 1857)] option.rs:1246
	(0, 1859): Wna (self6[0], 0xe0) option.rs:1246
	(0, 1860): Rna (self6[0], 0xe0) [(0, 1859)] result.rs:1977
	(0, 1861): Wna (, 0xe0) result.rs:1977
	(0, 1862): Rna (, 0xe0) [(0, 1861)] alloc.rs:184
	(0, 1863): Wna (, 0xe0) alloc.rs:185
	(0, 1864): Wna (, 16) alloc.rs:185
	(0, 1865): Rna (, 0xe0) [(0, 1863)] alloc.rs:188
	(0, 1866): Rna (, 16) [(0, 1864)] alloc.rs:188
	(0, 1867): FREE alloc.rs:188
	(0, 1868): FREE
	(0, 1869): FREE
	(0, 1870): FREE
	(0, 1871): FREE
	(0, 1872): FREE
	(0, 1873): FREE
	(0, 1874): FREE
	(0, 1875): FREE
	(0, 1876): Wna (, 0xe0) alloc.rs:243
	(0, 1877): Wna (, 16) alloc.rs:243
	(0, 1878): Rna (, 0xe0) [(0, 1876)] alloc.rs:332
	(0, 1879): Rna (, 0xe0) [(0, 1876)] alloc.rs:333
	(0, 1880): FREE alloc.rs:336
	(0, 1881): FREE
	(0, 1882): Rna (x.i21[0], 0xb0) [(0, 1820)] boxed.rs:260
	(0, 1883): Rna (x.i21[8], 0x8000000000000308) [(0, 1821)] boxed.rs:260
	(0, 1884): Wna (, 0xb0) boxed.rs:260
	(0, 1885): Wna (, 0x8000000000000308) boxed.rs:260
	(0, 1886): Wna (b.i8[0], 0xe0) manually_drop.rs:74
	(0, 1887): Rna (b.i8[0], 0xe0) [(0, 1886)] boxed.rs:1162
	(0, 1888): MALLOC 
	(0, 1889): Wna (, 0x0)
	(0, 1890): MALLOC 
	(0, 1891): MALLOC pi
	(0, 1892): Wna (pi[0], 0x0)
	(0, 1893): Wna (pi[8], 0x0)
	(0, 1894): Wna (pi[16], 0x0)
	(0, 1895): Wna (pi[24], 0x0)
	(0, 1896): Wna (pi[32], 0x0)
	(0, 1897): Wna (pi[40], 0x0)
	(0, 1898): Wna (pi[48], 0x0)
	(0, 1899): Wna (pi[56], 0x0)
	(0, 1900): MALLOC fmt
	(0, 1901): Wna (fmt[0], 0x0) const_ptr.rs:145
	(0, 1902): Wna (fmt[8], 0x0) const_ptr.rs:145
	(0, 1903): Wna (fmt[16], 0x0) const_ptr.rs:145
	(0, 1904): Wna (fmt[24], 0x0) const_ptr.rs:145
	(0, 1905): Wna (fmt[32], 0x0) const_ptr.rs:145
	(0, 1906): Wna (fmt[40], 0x0) const_ptr.rs:145
	(0, 1907): Wna (, 1) uint_macros.rs:79
	(0, 1908): Rna (, 1) [(0, 1907)] uint_macros.rs:79
	(0, 1909): FREE ub_checks.rs:72
	(0, 1910): FREE
	(0, 1911): FREE
	(0, 1912): FREE
	(0, 1913): Wna (u.i[0], 0) intrinsics.rs:3235
	(0, 1914): Wna (u.i[0], 0) intrinsics.rs:3235
	(0, 1915): Wna (u.i[0], 0) intrinsics.rs:3235
	(0, 1916): Wna (u.i[0], 0) intrinsics.rs:3235
	(0, 1917): Wna (u.i[0], 0) intrinsics.rs:3235
	(0, 1918): Wna (u.i[0], 0) intrinsics.rs:3235
	(0, 1919): Wna (u.i[0], 0) intrinsics.rs:3235
	(0, 1920): Wna (u.i[0], 0) intrinsics.rs:3235
	(0, 1921): Rna (u.i[0], 0) [(0, 1920)(0, 685)] maybe_uninit.rs:401
	(0, 1922): Wna (native.i[0], 0) manually_drop.rs:92
	(0, 1923): MALLOC 
	(0, 1924): Wna (, 0x0)
	(0, 1925): MALLOC 
	(0, 1926): MALLOC pi
	(0, 1927): Wna (pi[0], 0x0)
	(0, 1928): Wna (pi[8], 0x0)
	(0, 1929): Wna (pi[16], 0x0)
	(0, 1930): Wna (pi[24], 0x0)
	(0, 1931): Wna (pi[32], 0x0)
	(0, 1932): Wna (pi[40], 0x0)
	(0, 1933): Wna (pi[48], 0x0)
	(0, 1934): Wna (pi[56], 0x0)
	(0, 1935): MALLOC fmt
	(0, 1936): Wna (fmt[0], 0x0) const_ptr.rs:145
	(0, 1937): Wna (fmt[8], 0x0) const_ptr.rs:145
	(0, 1938): Wna (fmt[16], 0x0) const_ptr.rs:145
	(0, 1939): Wna (fmt[24], 0x0) const_ptr.rs:145
	(0, 1940): Wna (fmt[32], 0x0) const_ptr.rs:145
	(0, 1941): Wna (fmt[40], 0x0) const_ptr.rs:145
	(0, 1942): Wna (, 1) uint_macros.rs:79
	(0, 1943): Rna (, 1) [(0, 1942)] uint_macros.rs:79
	(0, 1944): FREE ub_checks.rs:72
	(0, 1945): FREE
	(0, 1946): FREE
	(0, 1947): FREE
	(0, 1948): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1949): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1950): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1951): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1952): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1953): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1954): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1955): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1956): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1957): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1958): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1959): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1960): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1961): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1962): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1963): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1964): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1965): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1966): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1967): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1968): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1969): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1970): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1971): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1972): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1973): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1974): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1975): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1976): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1977): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1978): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1979): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1980): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1981): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1982): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1983): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1984): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1985): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1986): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1987): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1988): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1989): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1990): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1991): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1992): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1993): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1994): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1995): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1996): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1997): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1998): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 1999): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 2000): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 2001): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 2002): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 2003): Wna (u14.i[0], 0) intrinsics.rs:3235
	(0, 2004): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2005): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2006): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2007): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2008): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2009): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2010): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2011): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2012): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2013): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2014): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2015): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2016): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2017): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2018): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2019): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2020): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2021): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2022): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2023): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2024): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2025): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2026): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2027): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2028): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2029): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2030): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2031): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2032): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2033): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2034): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2035): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2036): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2037): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2038): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2039): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2040): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2041): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2042): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2043): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2044): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2045): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2046): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2047): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2048): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2049): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2050): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2051): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2052): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2053): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2054): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2055): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2056): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2057): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2058): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2059): Wna (attr.i[0], 0) maybe_uninit.rs:401
	(0, 2060): Wna (, 0) thread.rs:56
	(0, 2061): Wna (v1.i[0], 2097152)
	(0, 2062): Wna (v2.i[0], 16384)
	(0, 2063): Wna (, 1) cmp.rs:1356
	(0, 2064): Wna (, 0x4000000000000fc0)
	(0, 2065): Wna (, 0x4000000000000fb0)
	(0, 2066): Rna (, 0x4000000000000fc0) [(0, 2064)] function.rs:251
	(0, 2067): Rna (, 0x4000000000000fb0) [(0, 2065)] function.rs:251
	(0, 2068): Rna (v1.i[0], 2097152) [(0, 2061)] cmp.rs:1576
	(0, 2069): Rna (v2.i[0], 16384) [(0, 2062)] cmp.rs:1576
	(0, 2070): Wna (, 1) cmp.rs:1356
	(0, 2071): Rna (v1.i[0], 2097152) [(0, 2061)] cmp.rs:1358
	(0, 2072): Wna (, 2097152) cmp.rs:1358
	(0, 2073): Rna (, 2097152) [(0, 2072)] cmp.rs:1360
	(0, 2074): THREAD_CREATE [thread 1] thread.rs:88
	(0, 2075): Wna (native.i[0], 1) thread.rs:88
	(0, 2076): Wna (, 0) thread.rs:92
	(0, 2077): Rna (native.i[0], 1) [(0, 2075)] thread.rs:100
	(0, 2078): Wna (, 1) thread.rs:100
	(0, 2079): Wna (, 0) thread.rs:100
	(0, 2080): Rna (, 0) [(0, 2079)] thread.rs:113
	(0, 2081): Rna (, 0x1) [(0, 2078)] thread.rs:113
	(0, 2082): Wna (self20.i[0], 0) mod.rs:568
	(0, 2083): Wna (self20.i[8], 0x1) mod.rs:568
	(0, 2084): Rna (self20.i[0], 0) [(0, 2082)] result.rs:1976
	(0, 2085): Rna (self20.i[8], 1) [(0, 2083)] result.rs:1977
	(0, 2086): Wna (, 1) result.rs:1977
	(0, 2087): Wna (, 0) result.rs:1977
	(0, 2088): Rna (, 1) [(0, 2086)] mod.rs:568
	(0, 2089): Rna (my_thread.i[0], 0x30) [(0, 1492)] mod.rs:569
	(0, 2090): Rna (my_packet.i[0], 0x70) [(0, 1605)] mod.rs:570
	(0, 2091): Wna (, 1) mod.rs:554
	(0, 2092): Wna (, 0x30) mod.rs:554
	(0, 2093): Wna (, 0x70) mod.rs:554
	(0, 2094): Rna (, 48) [(0, 2092)] mod.rs:554
	(0, 2095): Wna (self1[0], 48) mod.rs:554
	(0, 2096): Rna (, 112) [(0, 2093)] mod.rs:554
	(0, 2097): Wna (self1[8], 112) mod.rs:554
	(0, 2098): Rna (, 1) [(0, 2091)] mod.rs:554
	(0, 2099): Wna (self1[16], 1) mod.rs:554
	(0, 2100): Rna (self1[0], 0x30) [(0, 2095)] result.rs:1976
	(0, 2101): Rna (self1[0], 48) [(0, 2095)] mod.rs:461
	(0, 2102): Wna (, 48) mod.rs:461
	(0, 2103): Rna (self1[8], 112) [(0, 2097)] mod.rs:461
	(0, 2104): Wna (, 112) mod.rs:461
	(0, 2105): Rna (self1[16], 1) [(0, 2099)] mod.rs:461
	(0, 2106): Wna (, 1) mod.rs:461
	(0, 2107): FREE mod.rs:462
	(0, 2108): FREE
	(0, 2109): FREE
	(0, 2110): FREE
	(0, 2111): FREE
	(0, 2112): FREE
	(0, 2113): FREE
	(0, 2114): FREE
	(0, 2115): FREE
	(0, 2116): FREE
	(0, 2117): FREE
	(0, 2118): FREE
	(0, 2119): FREE
	(0, 2120): FREE
	(0, 2121): FREE
	(0, 2122): FREE
	(0, 2123): FREE
	(0, 2124): FREE
	(0, 2125): FREE
	(0, 2126): FREE
	(0, 2127): FREE
	(0, 2128): FREE
	(0, 2129): FREE
	(0, 2130): FREE
	(0, 2131): FREE
	(0, 2132): FREE
	(0, 2133): FREE
	(0, 2134): FREE
	(0, 2135): FREE
	(0, 2136): FREE
	(0, 2137): FREE
	(0, 2138): FREE
	(0, 2139): FREE
	(0, 2140): FREE
	(0, 2141): FREE
	(0, 2142): FREE
	(0, 2143): FREE
	(0, 2144): FREE
	(0, 2145): FREE
	(0, 2146): FREE
	(0, 2147): FREE
	(0, 2148): FREE
	(0, 2149): FREE
	(0, 2150): FREE
	(0, 2151): FREE
	(0, 2152): FREE
	(0, 2153): FREE
	(0, 2154): FREE
	(0, 2155): FREE
	(0, 2156): FREE
	(0, 2157): FREE
	(0, 2158): FREE
	(0, 2159): FREE
	(0, 2160): FREE
	(0, 2161): FREE
	(0, 2162): FREE
	(0, 2163): FREE
	(0, 2164): FREE
	(0, 2165): FREE
	(0, 2166): FREE
	(0, 2167): FREE
	(0, 2168): FREE
	(0, 2169): FREE
	(0, 2170): FREE
	(0, 2171): FREE
	(0, 2172): FREE
	(0, 2173): FREE
	(0, 2174): FREE
	(0, 2175): FREE
	(0, 2176): FREE
	(0, 2177): FREE
	(0, 2178): FREE
	(0, 2179): FREE
	(0, 2180): FREE
	(0, 2181): FREE
	(0, 2182): FREE
	(0, 2183): FREE
	(0, 2184): FREE
	(0, 2185): FREE
	(0, 2186): FREE
	(0, 2187): FREE
	(0, 2188): FREE
	(0, 2189): FREE
	(0, 2190): FREE
	(0, 2191): FREE
	(0, 2192): FREE
	(0, 2193): FREE
	(0, 2194): FREE
	(0, 2195): FREE
	(0, 2196): FREE
	(0, 2197): FREE
	(0, 2198): FREE
	(0, 2199): FREE
	(0, 2200): FREE
	(0, 2201): FREE
	(0, 2202): FREE
	(0, 2203): FREE
	(0, 2204): FREE
	(0, 2205): FREE
	(0, 2206): FREE
	(0, 2207): FREE
	(0, 2208): FREE
	(0, 2209): FREE
	(0, 2210): FREE
	(0, 2211): FREE
	(0, 2212): FREE
	(0, 2213): FREE
	(0, 2214): FREE
	(0, 2215): FREE
	(0, 2216): FREE
	(0, 2217): FREE
	(0, 2218): FREE
	(0, 2219): FREE
	(0, 2220): FREE
	(0, 2221): FREE
	(0, 2222): FREE
	(0, 2223): FREE
	(0, 2224): FREE
	(0, 2225): FREE
	(0, 2226): FREE
	(0, 2227): FREE
	(0, 2228): FREE
	(0, 2229): FREE
	(0, 2230): FREE
	(0, 2231): FREE
	(0, 2232): FREE
	(0, 2233): FREE
	(0, 2234): FREE
	(0, 2235): FREE
	(0, 2236): FREE
	(0, 2237): FREE
	(0, 2238): FREE
	(0, 2239): FREE
	(0, 2240): FREE
	(0, 2241): FREE
	(0, 2242): FREE
	(0, 2243): FREE
	(0, 2244): FREE
	(0, 2245): FREE
	(0, 2246): FREE
	(0, 2247): FREE
	(0, 2248): FREE
	(0, 2249): FREE
	(0, 2250): FREE
	(0, 2251): FREE
	(0, 2252): FREE
	(0, 2253): FREE
	(0, 2254): FREE
	(0, 2255): FREE
	(0, 2256): FREE
	(0, 2257): FREE
	(0, 2258): FREE
	(0, 2259): FREE
	(0, 2260): FREE
	(0, 2261): FREE
	(0, 2262): FREE
	(0, 2263): FREE
	(0, 2264): FREE
	(0, 2265): FREE
	(0, 2266): FREE
	(0, 2267): FREE
	(0, 2268): FREE
	(0, 2269): FREE
	(0, 2270): FREE
	(0, 2271): FREE
	(0, 2272): FREE
	(0, 2273): FREE
	(0, 2274): FREE
	(0, 2275): FREE
	(0, 2276): FREE
	(0, 2277): FREE
	(0, 2278): FREE
	(0, 2279): FREE
	(0, 2280): FREE
	(0, 2281): FREE
	(0, 2282): FREE
	(0, 2283): FREE
	(0, 2284): FREE
	(0, 2285): FREE
	(0, 2286): FREE
	(0, 2287): FREE
	(0, 2288): FREE
	(0, 2289): FREE
	(0, 2290): FREE
	(0, 2291): FREE
	(0, 2292): FREE
	(0, 2293): FREE
	(0, 2294): FREE
	(0, 2295): FREE
	(0, 2296): FREE
	(0, 2297): FREE
	(0, 2298): FREE
	(0, 2299): FREE
	(0, 2300): FREE
	(0, 2301): FREE
	(0, 2302): FREE
	(0, 2303): FREE
	(0, 2304): FREE
	(0, 2305): FREE
	(0, 2306): FREE
	(0, 2307): FREE
	(0, 2308): FREE
	(0, 2309): FREE
	(0, 2310): FREE
	(0, 2311): FREE
	(0, 2312): FREE
	(0, 2313): FREE
	(0, 2314): FREE
	(0, 2315): FREE
	(0, 2316): FREE
	(0, 2317): FREE
	(0, 2318): FREE
	(0, 2319): FREE
	(0, 2320): FREE
	(0, 2321): FREE
	(0, 2322): FREE
	(0, 2323): FREE
	(0, 2324): FREE
	(0, 2325): FREE
	(0, 2326): FREE
	(0, 2327): FREE
	(0, 2328): FREE
	(0, 2329): FREE
	(0, 2330): FREE
	(0, 2331): FREE
	(0, 2332): FREE
	(0, 2333): FREE
	(0, 2334): FREE
	(0, 2335): FREE
	(0, 2336): FREE
	(0, 2337): FREE
	(0, 2338): FREE
	(0, 2339): FREE
	(0, 2340): FREE
	(0, 2341): MALLOC 
	(0, 2342): Wna (, 0x0)
	(0, 2343): MALLOC pi.i
	(0, 2344): Wna (pi.i[0], 0x0)
	(0, 2345): Wna (pi.i[8], 0x0)
	(0, 2346): Wna (pi.i[16], 0x0)
	(0, 2347): Wna (pi.i[24], 0x0)
	(0, 2348): Wna (pi.i[32], 0x0)
	(0, 2349): Wna (pi.i[40], 0x0)
	(0, 2350): Wna (pi.i[48], 0x0)
	(0, 2351): Wna (pi.i[56], 0x0)
	(0, 2352): MALLOC _19.i
	(0, 2353): Wna (, 0x0)
	(0, 2354): Wna (, 0x0)
	(0, 2355): MALLOC _12.i
	(0, 2356): Wna (, 0x0)
	(0, 2357): Wna (, 0x0)
	(0, 2358): MALLOC _6.i
	(0, 2359): Wna (, 0x0)
	(0, 2360): Wna (, 0x0)
	(0, 2361): Wna (, 0x0)
	(0, 2362): Wna (, 0x0)
	(0, 2363): MALLOC fmt.i
	(0, 2364): Wna (fmt.i[0], 0x0)
	(0, 2365): Wna (fmt.i[8], 0x0)
	(0, 2366): Wna (fmt.i[16], 0x0)
	(0, 2367): Wna (fmt.i[24], 0x0)
	(0, 2368): Wna (fmt.i[32], 0x0)
	(0, 2369): Wna (fmt.i[40], 0x0)
	(0, 2370): MALLOC error.i
	(0, 2371): Wna (error.i[0], 0x0)
	(0, 2372): Wna (error.i[8], 0x0)
	(0, 2373): MALLOC msg.i
	(0, 2374): Wna (msg.i[0], 0x0)
	(0, 2375): Wna (msg.i[8], 0x0)
	(0, 2376): MALLOC e
	(0, 2377): Wna (e[0], 0x0) result.rs:1057
	(0, 2378): Rna (, 0x30) [(0, 2102)] result.rs:1057
	(0, 2379): Rna (, 48) [(0, 2102)] result.rs:1058
	(0, 2380): Wna (t1[0], 48) result.rs:1058
	(0, 2381): Rna (, 112) [(0, 2104)] result.rs:1058
	(0, 2382): Wna (t1[8], 112) result.rs:1058
	(0, 2383): Rna (, 1) [(0, 2106)] result.rs:1058
	(0, 2384): Wna (t1[16], 1) result.rs:1058
	(0, 2385): FREE result.rs:1061
	(0, 2386): FREE
	(0, 2387): FREE
	(0, 2388): FREE
	(0, 2389): FREE
	(0, 2390): FREE
	(0, 2391): FREE
	(0, 2392): FREE
	(0, 2393): FREE
	(0, 2394): FREE mod.rs:686
	(0, 2395): FREE
	(0, 2396): FREE
	(0, 2397): Rna (foo_clone2[0], 0x10) [(0, 356)] non_null.rs:402
	(0, 2398): Rna (, 0) [(0, 333)] cell.rs:536
	(0, 2399): Wna (, 1) mod.rs:1535
	(0, 2400): MALLOC _2
	(0, 2401): Wna (, 0x0) mod.rs:1784
	(0, 2402): Wna (, 0x0) mod.rs:1784
	(0, 2403): Wna (, 0x0) mod.rs:1784
	(0, 2404): Rna (t1[16], 1) [(0, 2384)] mod.rs:1784
	(0, 2405): Wna (, 1) mod.rs:1784
	(0, 2406): Rna (t1[0], 48) [(0, 2380)] mod.rs:1784
	(0, 2407): Wna (, 48) mod.rs:1784
	(0, 2408): Rna (t1[8], 112) [(0, 2382)] mod.rs:1784
	(0, 2409): Wna (, 112) mod.rs:1784
	(0, 2410): MALLOC src
	(0, 2411): Wna (src[0], 0x0)
	(0, 2412): Wna (src[8], 0x0)
	(0, 2413): Wna (src[16], 0x0)
	(0, 2414): MALLOC self1
	(0, 2415): Wna (self1[0], 0x0)
	(0, 2416): MALLOC result
	(0, 2417): Wna (result[0], 0x0) mod.rs:1650
	(0, 2418): Wna (result[8], 0x0) mod.rs:1650
	(0, 2419): Wna (result[16], 0x0) mod.rs:1650
	(0, 2420): Rna (, 1) [(0, 2405)] mod.rs:1650
	(0, 2421): BLOCK[join]
<0, 1> _ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E:
	(1, 1): MALLOC _13.i
	(1, 2): Wna (, 0x0)
	(1, 3): MALLOC layout.i
	(1, 4): Wna (, 0x0)
	(1, 5): Wna (, 0x0)
	(1, 6): MALLOC 
	(1, 7): Wna (, 0x0)
	(1, 8): MALLOC 
	(1, 9): Wna (, 0x0)
	(1, 10): MALLOC layout
	(1, 11): Wna (layout[0], 0x0)
	(1, 12): Wna (layout[8], 0x0)
	(1, 13): MALLOC _3
	(1, 14): Wna (, 0x0) boxed.rs:2070
	(1, 15): Wna (, 0xe0) boxed.rs:2070
	(1, 16): Rna (, 0xe0) [(1, 15)] boxed.rs:2070
	(1, 17): Rna (, 0xb0) [(0, 1884)] boxed.rs:2070
	(1, 18): Rna (, 0x8000000000000308) [(0, 1885)] boxed.rs:2070
	(1, 19): MALLOC _13.i
	(1, 20): Wna (, 0x0)
	(1, 21): MALLOC layout.i
	(1, 22): Wna (, 0x0)
	(1, 23): Wna (, 0x0)
	(1, 24): MALLOC 
	(1, 25): Wna (, 0x0)
	(1, 26): MALLOC 
	(1, 27): Wna (, 0x0)
	(1, 28): MALLOC layout
	(1, 29): Wna (layout[0], 0x0)
	(1, 30): Wna (layout[8], 0x0)
	(1, 31): MALLOC _3
	(1, 32): Wna (, 0x0) boxed.rs:2070
	(1, 33): Wna (, 0x0) boxed.rs:2070
	(1, 34): Wna (, 0xb0) boxed.rs:2070
	(1, 35): Wna (, 0x8000000000000308) boxed.rs:2070
	(1, 36): Rna (, 0xb0) [(1, 34)] boxed.rs:2070
	(1, 37): Rna (, 0x8000000000000308) [(1, 35)] boxed.rs:2070
	(1, 38): Rna (vtable.0.align, 0x63e7ed223018) [INIT] boxed.rs:2070
	(1, 39): MALLOC _8.i101
	(1, 40): Wna (, 0x0)
	(1, 41): Wna (, 0x0)
	(1, 42): Wna (, 0x0)
	(1, 43): MALLOC _8.i
	(1, 44): Wna (, 0x0)
	(1, 45): Wna (, 0x0)
	(1, 46): Wna (, 0x0)
	(1, 47): MALLOC _13.i.i83
	(1, 48): Wna (, 0x0)
	(1, 49): MALLOC layout.i.i84
	(1, 50): Wna (, 0x0)
	(1, 51): Wna (, 0x0)
	(1, 52): MALLOC _2.i85
	(1, 53): Wna (, 0x0)
	(1, 54): Wna (, 0x0)
	(1, 55): Wna (, 0x0)
	(1, 56): MALLOC _13.i.i
	(1, 57): Wna (, 0x0)
	(1, 58): MALLOC layout.i.i
	(1, 59): Wna (, 0x0)
	(1, 60): Wna (, 0x0)
	(1, 61): MALLOC _2.i80
	(1, 62): Wna (, 0x0)
	(1, 63): Wna (, 0x0)
	(1, 64): Wna (, 0x0)
	(1, 65): MALLOC _13.i.i.i33
	(1, 66): Wna (, 0x0)
	(1, 67): MALLOC layout.i.i.i34
	(1, 68): Wna (, 0x0)
	(1, 69): Wna (, 0x0)
	(1, 70): MALLOC 
	(1, 71): Wna (, 0x0)
	(1, 72): MALLOC 
	(1, 73): Wna (, 0x0)
	(1, 74): MALLOC 
	(1, 75): Wna (, 0x0)
	(1, 76): MALLOC dst.dbg.spill.i.i.i35
	(1, 77): Wna (, 0x0)
	(1, 78): MALLOC self.dbg.spill15.i.i.i36
	(1, 79): Wna (, 0x0)
	(1, 80): MALLOC inner.dbg.spill14.i.i.i37
	(1, 81): Wna (, 0x0)
	(1, 82): MALLOC inner.dbg.spill.i.i.i38
	(1, 83): Wna (, 0x0)
	(1, 84): MALLOC self.dbg.spill12.i.i.i39
	(1, 85): Wna (, 0x0)
	(1, 86): MALLOC ptr.dbg.spill11.i.i.i40
	(1, 87): Wna (, 0x0)
	(1, 88): MALLOC ptr.dbg.spill.i.i.i41
	(1, 89): Wna (, 0x0)
	(1, 90): MALLOC self.dbg.spill10.i.i.i42
	(1, 91): Wna (, 0x0)
	(1, 92): MALLOC self.dbg.spill.i.i.i43
	(1, 93): Wna (, 0x0)
	(1, 94): MALLOC _2.i.i.i44
	(1, 95): Wna (, 0x0)
	(1, 96): Wna (, 0x0)
	(1, 97): MALLOC force_no_backtrace.dbg.spill6.i.i.i45
	(1, 98): MALLOC can_unwind.dbg.spill5.i.i.i46
	(1, 99): MALLOC pieces.dbg.spill4.i.i.i47
	(1, 100): Wna (, 0x0)
	(1, 101): MALLOC force_no_backtrace.dbg.spill.i.i.i48
	(1, 102): MALLOC can_unwind.dbg.spill.i.i.i49
	(1, 103): MALLOC pieces.dbg.spill.i.i.i50
	(1, 104): Wna (, 0x0)
	(1, 105): MALLOC order.dbg.spill3.i.i.i51
	(1, 106): MALLOC order.dbg.spill2.i.i.i52
	(1, 107): MALLOC val.dbg.spill1.i.i.i53
	(1, 108): Wna (, 0x0)
	(1, 109): MALLOC order.dbg.spill.i.i.i54
	(1, 110): MALLOC val.dbg.spill.i.i.i55
	(1, 111): Wna (, 0x0)
	(1, 112): MALLOC _x.i56
	(1, 113): Wna (, 0x0)
	(1, 114): Wna (, 0x0)
	(1, 115): MALLOC _13.i.i.i
	(1, 116): Wna (, 0x0)
	(1, 117): MALLOC layout.i.i.i
	(1, 118): Wna (, 0x0)
	(1, 119): Wna (, 0x0)
	(1, 120): MALLOC 
	(1, 121): Wna (, 0x0)
	(1, 122): MALLOC 
	(1, 123): Wna (, 0x0)
	(1, 124): MALLOC 
	(1, 125): Wna (, 0x0)
	(1, 126): MALLOC dst.dbg.spill.i.i.i
	(1, 127): Wna (, 0x0)
	(1, 128): MALLOC self.dbg.spill15.i.i.i
	(1, 129): Wna (, 0x0)
	(1, 130): MALLOC inner.dbg.spill14.i.i.i
	(1, 131): Wna (, 0x0)
	(1, 132): MALLOC inner.dbg.spill.i.i.i
	(1, 133): Wna (, 0x0)
	(1, 134): MALLOC self.dbg.spill12.i.i.i
	(1, 135): Wna (, 0x0)
	(1, 136): MALLOC ptr.dbg.spill11.i.i.i
	(1, 137): Wna (, 0x0)
	(1, 138): MALLOC ptr.dbg.spill.i.i.i
	(1, 139): Wna (, 0x0)
	(1, 140): MALLOC self.dbg.spill10.i.i.i
	(1, 141): Wna (, 0x0)
	(1, 142): MALLOC self.dbg.spill.i.i.i
	(1, 143): Wna (, 0x0)
	(1, 144): MALLOC _2.i.i.i
	(1, 145): Wna (, 0x0)
	(1, 146): Wna (, 0x0)
	(1, 147): MALLOC force_no_backtrace.dbg.spill6.i.i.i
	(1, 148): MALLOC can_unwind.dbg.spill5.i.i.i
	(1, 149): MALLOC pieces.dbg.spill4.i.i.i
	(1, 150): Wna (, 0x0)
	(1, 151): MALLOC force_no_backtrace.dbg.spill.i.i.i
	(1, 152): MALLOC can_unwind.dbg.spill.i.i.i
	(1, 153): MALLOC pieces.dbg.spill.i.i.i
	(1, 154): Wna (, 0x0)
	(1, 155): MALLOC order.dbg.spill3.i.i.i
	(1, 156): MALLOC order.dbg.spill2.i.i.i
	(1, 157): MALLOC val.dbg.spill1.i.i.i
	(1, 158): Wna (, 0x0)
	(1, 159): MALLOC order.dbg.spill.i.i.i
	(1, 160): MALLOC val.dbg.spill.i.i.i
	(1, 161): Wna (, 0x0)
	(1, 162): MALLOC _x.i
	(1, 163): Wna (, 0x0)
	(1, 164): Wna (, 0x0)
	(1, 165): MALLOC 
	(1, 166): Wna (, 0x0)
	(1, 167): MALLOC dst.dbg.spill.i.i11
	(1, 168): Wna (, 0x0)
	(1, 169): MALLOC self.dbg.spill14.i.i12
	(1, 170): Wna (, 0x0)
	(1, 171): MALLOC self.dbg.spill13.i.i13
	(1, 172): Wna (, 0x0)
	(1, 173): MALLOC self.dbg.spill12.i.i14
	(1, 174): Wna (, 0x0)
	(1, 175): MALLOC self.dbg.spill11.i.i15
	(1, 176): Wna (, 0x0)
	(1, 177): MALLOC self.dbg.spill9.i.i16
	(1, 178): Wna (, 0x0)
	(1, 179): MALLOC self.dbg.spill.i.i17
	(1, 180): Wna (, 0x0)
	(1, 181): MALLOC force_no_backtrace.dbg.spill6.i.i18
	(1, 182): MALLOC can_unwind.dbg.spill5.i.i19
	(1, 183): MALLOC pieces.dbg.spill4.i.i20
	(1, 184): Wna (, 0x0)
	(1, 185): MALLOC force_no_backtrace.dbg.spill.i.i21
	(1, 186): MALLOC can_unwind.dbg.spill.i.i22
	(1, 187): MALLOC pieces.dbg.spill.i.i23
	(1, 188): Wna (, 0x0)
	(1, 189): MALLOC order.dbg.spill3.i.i24
	(1, 190): MALLOC order.dbg.spill2.i.i25
	(1, 191): MALLOC val.dbg.spill1.i.i26
	(1, 192): Wna (, 0x0)
	(1, 193): MALLOC order.dbg.spill.i.i27
	(1, 194): MALLOC val.dbg.spill.i.i28
	(1, 195): Wna (, 0x0)
	(1, 196): MALLOC 
	(1, 197): Wna (, 0x0)
	(1, 198): MALLOC dst.dbg.spill.i.i
	(1, 199): Wna (, 0x0)
	(1, 200): MALLOC self.dbg.spill14.i.i
	(1, 201): Wna (, 0x0)
	(1, 202): MALLOC self.dbg.spill13.i.i
	(1, 203): Wna (, 0x0)
	(1, 204): MALLOC self.dbg.spill12.i.i
	(1, 205): Wna (, 0x0)
	(1, 206): MALLOC self.dbg.spill11.i.i
	(1, 207): Wna (, 0x0)
	(1, 208): MALLOC self.dbg.spill9.i.i
	(1, 209): Wna (, 0x0)
	(1, 210): MALLOC self.dbg.spill.i.i
	(1, 211): Wna (, 0x0)
	(1, 212): MALLOC force_no_backtrace.dbg.spill6.i.i
	(1, 213): MALLOC can_unwind.dbg.spill5.i.i
	(1, 214): MALLOC pieces.dbg.spill4.i.i
	(1, 215): Wna (, 0x0)
	(1, 216): MALLOC force_no_backtrace.dbg.spill.i.i
	(1, 217): MALLOC can_unwind.dbg.spill.i.i
	(1, 218): MALLOC pieces.dbg.spill.i.i
	(1, 219): Wna (, 0x0)
	(1, 220): MALLOC order.dbg.spill3.i.i
	(1, 221): MALLOC order.dbg.spill2.i.i
	(1, 222): MALLOC val.dbg.spill1.i.i
	(1, 223): Wna (, 0x0)
	(1, 224): MALLOC order.dbg.spill.i.i
	(1, 225): MALLOC val.dbg.spill.i.i
	(1, 226): Wna (, 0x0)
	(1, 227): MALLOC _0.i
	(1, 228): Wna (, 0x0)
	(1, 229): Wna (, 0x0)
	(1, 230): MALLOC 
	(1, 231): MALLOC data
	(1, 232): Wna (data[0], 0x0)
	(1, 233): Wna (data[8], 0x0)
	(1, 234): MALLOC _sink
	(1, 235): Wna (_sink[0], 0x0)
	(1, 236): MALLOC _x
	(1, 237): Wna (_x[0], 0x0)
	(1, 238): MALLOC _14
	(1, 239): Wna (, 0x0)
	(1, 240): Wna (, 0x0)
	(1, 241): Wna (, 0x0)
	(1, 242): MALLOC try_result
	(1, 243): Wna (try_result[0], 0x0)
	(1, 244): Wna (try_result[8], 0x0)
	(1, 245): MALLOC self
	(1, 246): Wna (self[0], 0x0)
	(1, 247): MALLOC _7
	(1, 248): Wna (, 0x0)
	(1, 249): MALLOC _2
	(1, 250): Wna (, 0x0) non_null.rs:402
	(1, 251): Wna (, 0x0) non_null.rs:402
	(1, 252): Rna (, 0x30) [(0, 1810)] non_null.rs:402
	(1, 253): Rna (, 2) [(0, 1368)] mod.rs:1326
	(1, 254): Wna (, 0x0) mod.rs:1329
	(1, 255): Wna (, 0) mod.rs:1329
	(1, 256): Rna (, 0x0) [(1, 254)] mod.rs:1523
	(1, 257): Rna (, 0) [(1, 255)] mod.rs:1523
	(1, 258): Wna (, 0x0) mod.rs:520
	(1, 259): Wna (, 0) mod.rs:520
	(1, 260): Rna (, 0x0) [(1, 258)] mod.rs:520
	(1, 261): Rna (, 0x0) [(0, 1814)] mod.rs:524
	(1, 262): Wna (_sink[0], 0x0) stdio.rs:1071
	(1, 263): Rna (_sink[0], 0x0) [(1, 262)] mod.rs:543
	(1, 264): MALLOC 
	(1, 265): Wna (, 0x0)
	(1, 266): MALLOC pi.i
	(1, 267): Wna (pi.i[0], 0x0)
	(1, 268): Wna (pi.i[8], 0x0)
	(1, 269): Wna (pi.i[16], 0x0)
	(1, 270): Wna (pi.i[24], 0x0)
	(1, 271): Wna (pi.i[32], 0x0)
	(1, 272): Wna (pi.i[40], 0x0)
	(1, 273): Wna (pi.i[48], 0x0)
	(1, 274): Wna (pi.i[56], 0x0)
	(1, 275): MALLOC _19.i
	(1, 276): Wna (, 0x0)
	(1, 277): Wna (, 0x0)
	(1, 278): MALLOC _12.i
	(1, 279): Wna (, 0x0)
	(1, 280): Wna (, 0x0)
	(1, 281): MALLOC _6.i
	(1, 282): Wna (, 0x0)
	(1, 283): Wna (, 0x0)
	(1, 284): Wna (, 0x0)
	(1, 285): Wna (, 0x0)
	(1, 286): MALLOC fmt.i
	(1, 287): Wna (fmt.i[0], 0x0)
	(1, 288): Wna (fmt.i[8], 0x0)
	(1, 289): Wna (fmt.i[16], 0x0)
	(1, 290): Wna (fmt.i[24], 0x0)
	(1, 291): Wna (fmt.i[32], 0x0)
	(1, 292): Wna (fmt.i[40], 0x0)
	(1, 293): MALLOC error.i
	(1, 294): Wna (error.i[0], 0x0)
	(1, 295): Wna (error.i[8], 0x0)
	(1, 296): MALLOC msg.i
	(1, 297): Wna (msg.i[0], 0x0)
	(1, 298): Wna (msg.i[8], 0x0)
	(1, 299): MALLOC e
	(1, 300): MALLOC self
	(1, 301): Wna (self[0], 0x0)
	(1, 302): Wna (self[8], 0x0)
	(1, 303): Wna (self[0], 0)
	(1, 304): Wna (self[8], 0x0)
	(1, 305): Rna (self[0], 0) [(1, 303)] result.rs:1057
	(1, 306): Rna (self[8], 0x0) [(1, 304)] result.rs:1058
	(1, 307): FREE result.rs:1061
	(1, 308): FREE
	(1, 309): FREE
	(1, 310): FREE
	(1, 311): FREE
	(1, 312): FREE
	(1, 313): FREE
	(1, 314): FREE
	(1, 315): FREE
	(1, 316): FREE
	(1, 317): Wna (, 0x0) stdio.rs:1071
	(1, 318): Rna (, 0x0) [(1, 317)] mod.rs:543
	(1, 319): Rna (, 0x10) [(0, 1816)] mod.rs:526
	(1, 320): Wna (self[0], 0x10) mod.rs:526
	(1, 321): Rna (self[0], 0x10) [(1, 320)] mod.rs:1326
	(1, 322): Wna (data[0], 0x10) panicking.rs:508
	(1, 323): Rna (data[0], 0x10) [(1, 322)] mod.rs:1326
	(1, 324): MALLOC _13.i.i
	(1, 325): Wna (, 0x0)
	(1, 326): MALLOC layout.i.i
	(1, 327): Wna (, 0x0)
	(1, 328): Wna (, 0x0)
	(1, 329): MALLOC 
	(1, 330): Wna (, 0x0)
	(1, 331): MALLOC 
	(1, 332): Wna (, 0x0)
	(1, 333): MALLOC 
	(1, 334): Wna (, 0x0)
	(1, 335): MALLOC dst.dbg.spill.i.i1.i
	(1, 336): Wna (, 0x0)
	(1, 337): MALLOC self.dbg.spill15.i.i.i
	(1, 338): Wna (, 0x0)
	(1, 339): MALLOC inner.dbg.spill14.i.i.i
	(1, 340): Wna (, 0x0)
	(1, 341): MALLOC inner.dbg.spill.i.i.i
	(1, 342): Wna (, 0x0)
	(1, 343): MALLOC self.dbg.spill12.i.i2.i
	(1, 344): Wna (, 0x0)
	(1, 345): MALLOC ptr.dbg.spill11.i.i.i
	(1, 346): Wna (, 0x0)
	(1, 347): MALLOC ptr.dbg.spill.i.i.i
	(1, 348): Wna (, 0x0)
	(1, 349): MALLOC self.dbg.spill10.i.i.i
	(1, 350): Wna (, 0x0)
	(1, 351): MALLOC self.dbg.spill.i.i3.i
	(1, 352): Wna (, 0x0)
	(1, 353): MALLOC _2.i.i4.i
	(1, 354): Wna (, 0x0)
	(1, 355): Wna (, 0x0)
	(1, 356): MALLOC force_no_backtrace.dbg.spill6.i.i5.i
	(1, 357): MALLOC can_unwind.dbg.spill5.i.i6.i
	(1, 358): MALLOC pieces.dbg.spill4.i.i7.i
	(1, 359): Wna (, 0x0)
	(1, 360): MALLOC force_no_backtrace.dbg.spill.i.i8.i
	(1, 361): MALLOC can_unwind.dbg.spill.i.i9.i
	(1, 362): MALLOC pieces.dbg.spill.i.i10.i
	(1, 363): Wna (, 0x0)
	(1, 364): MALLOC order.dbg.spill3.i.i11.i
	(1, 365): MALLOC order.dbg.spill2.i.i12.i
	(1, 366): MALLOC val.dbg.spill1.i.i13.i
	(1, 367): Wna (, 0x0)
	(1, 368): MALLOC order.dbg.spill.i.i14.i
	(1, 369): MALLOC val.dbg.spill.i.i15.i
	(1, 370): Wna (, 0x0)
	(1, 371): MALLOC _x.i.i
	(1, 372): Wna (, 0x0)
	(1, 373): Wna (, 0x0)
	(1, 374): MALLOC 
	(1, 375): Wna (, 0x0)
	(1, 376): MALLOC dst.dbg.spill.i.i.i
	(1, 377): Wna (, 0x0)
	(1, 378): MALLOC self.dbg.spill14.i.i.i
	(1, 379): Wna (, 0x0)
	(1, 380): MALLOC self.dbg.spill13.i.i.i
	(1, 381): Wna (, 0x0)
	(1, 382): MALLOC self.dbg.spill12.i.i.i
	(1, 383): Wna (, 0x0)
	(1, 384): MALLOC self.dbg.spill11.i.i.i
	(1, 385): Wna (, 0x0)
	(1, 386): MALLOC self.dbg.spill9.i.i.i
	(1, 387): Wna (, 0x0)
	(1, 388): MALLOC self.dbg.spill.i.i.i
	(1, 389): Wna (, 0x0)
	(1, 390): MALLOC force_no_backtrace.dbg.spill6.i.i.i
	(1, 391): MALLOC can_unwind.dbg.spill5.i.i.i
	(1, 392): MALLOC pieces.dbg.spill4.i.i.i
	(1, 393): Wna (, 0x0)
	(1, 394): MALLOC force_no_backtrace.dbg.spill.i.i.i
	(1, 395): MALLOC can_unwind.dbg.spill.i.i.i
	(1, 396): MALLOC pieces.dbg.spill.i.i.i
	(1, 397): Wna (, 0x0)
	(1, 398): MALLOC order.dbg.spill3.i.i.i
	(1, 399): MALLOC order.dbg.spill2.i.i.i
	(1, 400): MALLOC val.dbg.spill1.i.i.i
	(1, 401): Wna (, 0x0)
	(1, 402): MALLOC order.dbg.spill.i.i.i
	(1, 403): MALLOC val.dbg.spill.i.i.i
	(1, 404): Wna (, 0x0)
	(1, 405): MALLOC _1.i
	(1, 406): Wna (, 0x0)
	(1, 407): Wna (, 0x10)
	(1, 408): Rna (, 0x10) [(1, 407)] non_null.rs:402
	(1, 409): Rna (, 0) [BOTTOM] cell.rs:536
Coherence:
: [ (1, 406): Wna (SU#11880, 0x0) (1, 407): Wna (SU#11880, 0x10) ]
self[8]: [ (1, 302): Wna (SU#11344, 0x0) (1, 304): Wna (SU#11344, 0x0) ]
: [ (1, 228): Wna (SU#10880, 0x0) (1, 254): Wna (SU#10880, 0x0) ]
: [ (1, 32): Wna (SU#9616, 0x0) (1, 34): Wna (SU#9616, 0xb0) ]
: [ (0, 2403): Wna (SU#9328, 0x0) (0, 2405): Wna (SU#9328, 1) ]
: [ (0, 2401): Wna (SU#9312, 0x0) (0, 2407): Wna (SU#9312, 48) ]
layout[8]: [ (0, 1847): Wna (SU#8712, 0x0) (0, 1849): Wna (SU#8712, 16) ]
layout[0]: [ (0, 1846): Wna (SU#8704, 0x0) (0, 1848): Wna (SU#8704, 8) ]
: [ (0, 1844): Wna (SU#8688, 0x0) (0, 1864): Wna (SU#8688, 16) ]
: [ (0, 1843): Wna (SU#8680, 0x0) (0, 1863): Wna (SU#8680, 0xe0) ]
raw_ptr[0]: [ (0, 1841): Wna (SU#8672, 0x0) (0, 1855): Wna (SU#8672, 0xe0) ]
: [ (0, 1839): Wna (SU#8656, 0x0) (0, 1861): Wna (SU#8656, 0xe0) ]
self6[0]: [ (0, 1837): Wna (SU#8640, 0x0) (0, 1859): Wna (SU#8640, 0xe0) ]
self7[0]: [ (0, 1835): Wna (SU#8624, 0x0) (0, 1857): Wna (SU#8624, 0xe0) ]
: [ (0, 1828): Wna (SU#8568, 0x0) (0, 1852): Wna (SU#8568, 8) ]
: [ (0, 1826): Wna (SU#8552, 0x0) (0, 1877): Wna (SU#8552, 16) ]
: [ (0, 1825): Wna (SU#8544, 0x0) (0, 1876): Wna (SU#8544, 0xe0) ]
layout[8]: [ (0, 1774): Wna (SU#8520, 0x0) (0, 1776): Wna (SU#8520, 32) ]
layout[0]: [ (0, 1773): Wna (SU#8512, 0x0) (0, 1775): Wna (SU#8512, 8) ]
: [ (0, 1771): Wna (SU#8496, 0x0) (0, 1791): Wna (SU#8496, 32) ]
: [ (0, 1770): Wna (SU#8488, 0x0) (0, 1790): Wna (SU#8488, 0xb0) ]
raw_ptr[0]: [ (0, 1768): Wna (SU#8472, 0x0) (0, 1782): Wna (SU#8472, 0xb0) ]
: [ (0, 1766): Wna (SU#8456, 0x0) (0, 1788): Wna (SU#8456, 0xb0) ]
self6[0]: [ (0, 1764): Wna (SU#8440, 0x0) (0, 1786): Wna (SU#8440, 0xb0) ]
self7[0]: [ (0, 1762): Wna (SU#8424, 0x0) (0, 1784): Wna (SU#8424, 0xb0) ]
: [ (0, 1755): Wna (SU#8376, 0x0) (0, 1779): Wna (SU#8376, 8) ]
: [ (0, 1753): Wna (SU#8360, 0x0) (0, 1804): Wna (SU#8360, 32) ]
: [ (0, 1752): Wna (SU#8352, 0x0) (0, 1803): Wna (SU#8352, 0xb0) ]
self[8]: [ (0, 1712): Wna (SU#8320, 0x0) (0, 1714): Wna (SU#8320, 0x0) ]
self[0]: [ (0, 1711): Wna (SU#8312, 0x0) (0, 1713): Wna (SU#8312, 0) ]
self[8]: [ (0, 1653): Wna (SU#8024, 0x0) (0, 1655): Wna (SU#8024, 0x0) ]
self[0]: [ (0, 1652): Wna (SU#8016, 0x0) (0, 1654): Wna (SU#8016, 0) ]
layout[8]: [ (0, 1556): Wna (SU#7728, 0x0) (0, 1558): Wna (SU#7728, 48) ]
layout[0]: [ (0, 1555): Wna (SU#7720, 0x0) (0, 1557): Wna (SU#7720, 8) ]
: [ (0, 1553): Wna (SU#7704, 0x0) (0, 1573): Wna (SU#7704, 48) ]
: [ (0, 1552): Wna (SU#7696, 0x0) (0, 1572): Wna (SU#7696, 0x70) ]
raw_ptr[0]: [ (0, 1550): Wna (SU#7680, 0x0) (0, 1564): Wna (SU#7680, 0x70) ]
: [ (0, 1548): Wna (SU#7664, 0x0) (0, 1570): Wna (SU#7664, 0x70) ]
self6[0]: [ (0, 1546): Wna (SU#7656, 0x0) (0, 1568): Wna (SU#7656, 0x70) ]
self7[0]: [ (0, 1544): Wna (SU#7640, 0x0) (0, 1566): Wna (SU#7640, 0x70) ]
: [ (0, 1537): Wna (SU#7584, 0x0) (0, 1561): Wna (SU#7584, 8) ]
: [ (0, 1535): Wna (SU#7568, 0x0) (0, 1586): Wna (SU#7568, 48) ]
: [ (0, 1534): Wna (SU#7560, 0x0) (0, 1585): Wna (SU#7560, 0x70) ]
can_unwind.dbg.spill2.i16.i[0]: [ (0, 1410): Wna (SU#5935, 1) (0, 1411): Wna (SU#5934, 0) (0, 1412): Wna (SU#5933, 0) (0, 1413): Wna (SU#5932, 0) ]
can_unwind.dbg.spill.i18.i[0]: [ (0, 1408): Wna (SU#5937, 1) (0, 1409): Wna (SU#5936, 0) ]
can_unwind.dbg.spill.i.i[0]: [ (0, 1379): Wna (SU#6284, 1) (0, 1380): Wna (SU#6283, 0) (0, 1381): Wna (SU#6282, 1) (0, 1382): Wna (SU#6281, 0) (0, 1383): Wna (SU#6280, 0) ]
: [ (0, 1340): Wna (HU#48, 1) (0, 1504): UWrlx (HU#48, 2) ]
layout[8]: [ (0, 1303): Wna (SU#7528, 0x0) (0, 1305): Wna (SU#7528, 56) ]
layout[0]: [ (0, 1302): Wna (SU#7520, 0x0) (0, 1304): Wna (SU#7520, 8) ]
: [ (0, 1300): Wna (SU#7512, 0x0) (0, 1320): Wna (SU#7512, 56) ]
: [ (0, 1299): Wna (SU#7504, 0x0) (0, 1319): Wna (SU#7504, 0x30) ]
raw_ptr[0]: [ (0, 1297): Wna (SU#7488, 0x0) (0, 1311): Wna (SU#7488, 0x30) ]
: [ (0, 1295): Wna (SU#7472, 0x0) (0, 1317): Wna (SU#7472, 0x30) ]
self6[0]: [ (0, 1293): Wna (SU#7456, 0x0) (0, 1315): Wna (SU#7456, 0x30) ]
self7[0]: [ (0, 1291): Wna (SU#7440, 0x0) (0, 1313): Wna (SU#7440, 0x30) ]
: [ (0, 1284): Wna (SU#7384, 0x0) (0, 1308): Wna (SU#7384, 8) ]
: [ (0, 1180): Wna (SU#7376, 0x0) (0, 1187): Wna (SU#7376, 8) ]
: [ (0, 1178): Wna (SU#7360, 0x0) (0, 1194): Wna (SU#7360, 8) ]
: [ (0, 1176): Wna (SU#7344, 0x0) (0, 1182): Wna (SU#7344, 8) ]
: [ (0, 1174): Wna (SU#7328, 0x0) (0, 1184): Wna (SU#7328, 8) ]
: [ (0, 1172): Wna (SU#7312, 0x0) (0, 1189): Wna (SU#7312, 8) ]
: [ (0, 1170): Wna (SU#7296, 0x0) (0, 1191): Wna (SU#7296, 8) ]
_2[8]: [ (0, 1164): Wna (SU#7280, 0x0) (0, 1166): Wna (SU#7280, 0x4000000000001b40) ]
_2[0]: [ (0, 1163): Wna (SU#7272, 0x0) (0, 1165): Wna (SU#7272, 0x4000000000001b50) ]
: [ (0, 1161): Wna (SU#6954, 1) (0, 1204): Wna (SU#6955, 0) ]
next[8]: [ (0, 1154): Wna (SU#7256, 0x0) (0, 1156): Wna (SU#7256, 40) ]
next[0]: [ (0, 1153): Wna (SU#7248, 0x0) (0, 1155): Wna (SU#7248, 8) ]
: [ (0, 1151): Wna (SU#7240, 0x0) (0, 1219): Wna (SU#7240, 16) ]
self15[8]: [ (0, 1148): Wna (SU#7216, 0x0) (0, 1217): Wna (SU#7216, 16) ]
self16[8]: [ (0, 1145): Wna (SU#7192, 0x0) (0, 1215): Wna (SU#7192, 16) ]
: [ (0, 1142): Wna (SU#7168, 0x0) (0, 1228): Wna (SU#7168, 56) ]
self17[8]: [ (0, 1139): Wna (SU#7144, 0x0) (0, 1226): Wna (SU#7144, 56) ]
self18[8]: [ (0, 1136): Wna (SU#7120, 0x0) (0, 1224): Wna (SU#7120, 56) ]
: [ (0, 1592): Wna (HU#112, 1) (0, 1608): UWrlx (HU#112, 2) ]
: [ (0, 1133): Wna (SU#7096, 0x0) (0, 1237): Wna (SU#7096, 56) ]
: [ (0, 1132): Wna (SU#7088, 0x0) (0, 1236): Wna (SU#7088, 8) ]
self19[8]: [ (0, 1130): Wna (SU#7072, 0x0) (0, 1233): Wna (SU#7072, 56) ]
self19[0]: [ (0, 1129): Wna (SU#7064, 0x0) (0, 1232): Wna (SU#7064, 8) ]
: [ (0, 1127): Wna (SU#7056, 0x0) (0, 1242): Wna (SU#7056, 16) ]
: [ (0, 1364): Wna (HU#64, 2) (0, 1366): Wna (HU#64, 2) (0, 1368): Wna (HU#64, 2) ]
: [ (0, 1126): Wna (SU#7048, 0x0) (0, 1241): Wna (SU#7048, 56) ]
: [ (0, 1125): Wna (SU#7040, 0x0) (0, 1240): Wna (SU#7040, 8) ]
: [ (0, 1123): Wna (SU#7024, 0x0) (0, 1210): Wna (SU#7024, 8) ]
v1.i[0]: [ (0, 1117): Wna (SU#6992, 0x0) (0, 1159): Wna (SU#6992, 8) ]
v2.i[0]: [ (0, 1115): Wna (SU#6976, 0x0) (0, 1160): Wna (SU#6976, 8) ]
: [ (0, 1113): Wna (SU#6960, 0x0) (0, 1207): Wna (SU#6960, 8) ]
layout[8]: [ (0, 1107): Wna (SU#6944, 0x0) (0, 1280): Wna (SU#6944, 56) ]
layout[0]: [ (0, 1106): Wna (SU#6936, 0x0) (0, 1279): Wna (SU#6936, 8) ]
self[8]: [ (0, 1104): Wna (SU#6920, 0x0) (0, 1333): Wna (SU#6920, 56) ]
self[0]: [ (0, 1103): Wna (SU#6912, 0x0) (0, 1332): Wna (SU#6912, 0x30) ]
val[0]: [ (0, 1099): Wna (SU#6880, 0x0) (0, 1338): Wna (SU#6880, 1) ]
_3.i[16]: [ (0, 1097): Wna (SU#6864, 0x0) (0, 1274): Wna (SU#6864, 16) ]
_3.i[8]: [ (0, 1096): Wna (SU#6856, 0x0) (0, 1272): Wna (SU#6856, 56) ]
_3.i[0]: [ (0, 1095): Wna (SU#6848, 0x0) (0, 1270): Wna (SU#6848, 8) ]
_4.i[16]: [ (0, 1093): Wna (SU#6832, 0x0) (0, 1248): Wna (SU#6832, 16) ]
_4.i[8]: [ (0, 1092): Wna (SU#6824, 0x0) (0, 1246): Wna (SU#6824, 56) ]
_4.i[0]: [ (0, 1091): Wna (SU#6816, 0x0) (0, 1244): Wna (SU#6816, 8) ]
: [ (0, 1089): Wna (SU#6808, 0x0) (0, 1109): Wna (SU#6808, 16) ]
: [ (0, 1088): Wna (SU#6800, 0x0) (0, 1108): Wna (SU#6800, 8) ]
: [ (0, 1086): Wna (SU#6784, 0x0) (0, 1276): Wna (SU#6784, 8) ]
: [ (1, 250): Wna (SU#11040, 0x0) (1, 258): Wna (SU#11040, 0x0) ]
: [ (0, 1048): Wna (SU#6496, 0x0) (0, 1336): Wna (SU#6496, 0x30) ]
: [ (0, 369): Wna (SU#2104, 0x0) (0, 2104): Wna (SU#2104, 112) ]
self[32]: [ (0, 366): Wna (SU#2080, 0x0) (0, 377): Wna (SU#2080, 0) ]
last.i.i[0]: [ (0, 1036): Wna (SU#6408, 0x0) (0, 1389): Wna (SU#6408, 0) ]
self[16]: [ (0, 364): Wna (SU#2064, 0x0) (0, 373): Wna (SU#2064, -9223372036854775808) ]
: [ (0, 1034): Wna (SU#6392, 0x0) (0, 1369): Wna (SU#6392, 0) (0, 1370): Wna (SU#6392, 0) (0, 1371): Wna (SU#6392, 0) (0, 1372): Wna (SU#6392, 0) (0, 1373): Wna (SU#6392, 0) (0, 1374): Wna (SU#6392, 0) (0, 1375): Wna (SU#6392, 0) (0, 1376): Wna (SU#6392, 0) ]
self[0]: [ (0, 362): Wna (SU#2048, 0x0) (0, 378): Wna (SU#2048, 0) ]
data[0]: [ (1, 232): Wna (SU#10904, 0x0) (1, 322): Wna (SU#10904, 0x10) ]
: [ (0, 1029): Wna (SU#6360, 0x0) (0, 1430): Wna (SU#6360, 0) ]
: [ (0, 1028): Wna (SU#6352, 0x0) (0, 1429): Wna (SU#6352, 0) ]
: [ (1, 229): Wna (SU#10888, 0x0) (1, 255): Wna (SU#10888, 0) ]
: [ (0, 358): Wna (SU#2016, 0x0) (0, 371): Wna (SU#2016, -9223372036854775808) ]
: [ (0, 348): Wna (SU#2000, 0x0) (0, 352): Wna (SU#2000, 2) ]
: [ (0, 338): Wna (SU#1984, 0x0) (0, 342): Wna (SU#1984, 1) ]
: [ (0, 333): Wna (HU#32, 0) (0, 2399): Wna (HU#32, 1) ]
_1.i[0]: [ (0, 1043): Wna (SU#6464, 0x0) (0, 1046): Wna (SU#6464, 2) ]
: [ (0, 1213): Wna (SU#7002, 0) (0, 1222): Wna (SU#7001, 0) ]
: [ (0, 329): Wna (HU#16, 1) (0, 341): UWrlx (HU#16, 2) (0, 351): UWrlx (HU#16, 3) ]
arc.i.i[0]: [ (0, 1041): Wna (SU#6448, 0x0) (0, 1361): Wna (SU#6448, 0x30) ]
layout[8]: [ (0, 293): Wna (SU#1968, 0x0) (0, 295): Wna (SU#1968, 24) ]
layout[0]: [ (0, 292): Wna (SU#1960, 0x0) (0, 294): Wna (SU#1960, 8) ]
pieces.dbg.spill1.i.i[0]: [ (0, 1019): Wna (SU#6288, 0x0) (0, 1378): Wna (SU#6288, 0x8000000000000758) ]
: [ (0, 290): Wna (SU#1952, 0x0) (0, 310): Wna (SU#1952, 24) ]
: [ (0, 289): Wna (SU#1944, 0x0) (0, 309): Wna (SU#1944, 0x10) ]
: [ (0, 1012): Wna (SU#6272, 0x0) (0, 1387): Wna (SU#6272, 0) ]
raw_ptr[0]: [ (0, 287): Wna (SU#1928, 0x0) (0, 301): Wna (SU#1928, 0x10) ]
: [ (0, 285): Wna (SU#1912, 0x0) (0, 307): Wna (SU#1912, 0x10) ]
self6[0]: [ (0, 283): Wna (SU#1896, 0x0) (0, 305): Wna (SU#1896, 0x10) ]
self7[0]: [ (0, 281): Wna (SU#1880, 0x0) (0, 303): Wna (SU#1880, 0x10) ]
: [ (0, 274): Wna (SU#1824, 0x0) (0, 298): Wna (SU#1824, 8) ]
: [ (0, 272): Wna (SU#1816, 0x0) (0, 323): Wna (SU#1816, 24) ]
: [ (0, 271): Wna (SU#1808, 0x0) (0, 322): Wna (SU#1808, 0x10) ]
foo[0]: [ (0, 261): Wna (SU#1776, 0x0) (0, 336): Wna (SU#1776, 0x10) ]
foo_clone2[0]: [ (0, 259): Wna (SU#1760, 0x0) (0, 356): Wna (SU#1760, 0x10) ]
t1[16]: [ (0, 257): Wna (SU#1744, 0x0) (0, 2384): Wna (SU#1744, 1) ]
t1[8]: [ (0, 256): Wna (SU#1736, 0x0) (0, 2382): Wna (SU#1736, 112) ]
t1[0]: [ (0, 255): Wna (SU#1728, 0x0) (0, 2380): Wna (SU#1728, 48) ]
foo_clone1.dbg.spill[0]: [ (0, 253): Wna (SU#1712, 0x0) (0, 346): Wna (SU#1712, 0x10) ]
_3.i[16]: [ (0, 251): Wna (SU#1696, 0x0) (0, 267): Wna (SU#1696, 0) ]
_3.i[8]: [ (0, 250): Wna (SU#1688, 0x0) (0, 266): Wna (SU#1688, 1) ]
_3.i[0]: [ (0, 249): Wna (SU#1680, 0x0) (0, 264): Wna (SU#1680, 1) ]
: [ (0, 247): Wna (SU#1664, 0x0) (0, 262): Wna (SU#1664, 1) ]
b.i[0]: [ (0, 245): Wna (SU#1656, 0x0) (0, 334): Wna (SU#1656, 0x10) ]
pieces.dbg.spill.i20.i[0]: [ (0, 972): Wna (SU#5960, 0x0) (0, 1406): Wna (SU#5960, 0x80000000000008e8) ]
pieces.dbg.spill1.i19.i[0]: [ (0, 970): Wna (SU#5944, 0x0) (0, 1407): Wna (SU#5944, 0x8000000000000938) ]
stack_size.i[8]: [ (0, 810): Wna (SU#5064, 0x0) (0, 892): Wna (SU#5064, 0) ]
stack_size19.i[0]: [ (0, 807): Wna (SU#5048, 0x0) (0, 894): Wna (SU#5048, 2097152) ]
my_thread.i[0]: [ (0, 805): Wna (SU#5032, 0x0) (0, 1492): Wna (SU#5032, 0x30) ]
their_thread.i[0]: [ (0, 803): Wna (SU#5016, 0x0) (0, 1508): Wna (SU#5016, 0x30) ]
data.i[0]: [ (0, 796): Wna (SU#4960, 0x0) (0, 1511): Wna (SU#4960, 0x0) ]
value.i[0]: [ (0, 792): Wna (SU#4928, 0x0) (0, 1510): Wna (SU#4928, 0) ]
their_packet.i[0]: [ (0, 790): Wna (SU#4912, 0x0) (0, 1612): Wna (SU#4912, 0x70) ]
output_capture.i[0]: [ (0, 788): Wna (SU#4896, 0x0) (0, 1668): Wna (SU#4896, 0x0) ]
: [ (0, 959): Wna (SU#5896, 0x0) (0, 1422): Wna (SU#5896, 1) ]
_31.i[16]: [ (0, 776): Wna (SU#4808, 0x0) (0, 1746): Wna (SU#4808, 0) ]
_31.i[0]: [ (0, 774): Wna (SU#4792, 0x0) (0, 1742): Wna (SU#4792, 48) ]
: [ (0, 2402): Wna (SU#9320, 0x0) (0, 2409): Wna (SU#9320, 112) ]
: [ (0, 772): Wna (SU#4776, 0x0) (0, 2091): Wna (SU#4776, 1) ]
: [ (0, 770): Wna (SU#4760, 0x0) (0, 2092): Wna (SU#4760, 0x30) ]
self.dbg.spill24.i[0]: [ (0, 731): Wna (SU#4480, 0x0) (0, 1495): Wna (SU#4480, 0x40000000000013a8) ]
self[0]: [ (1, 246): Wna (SU#11016, 0x0) (1, 320): Wna (SU#11016, 0x10) ]
: [ (0, 1121): Wna (SU#7008, 0x0) (0, 1230): Wna (SU#7008, 8) ]
self.dbg.spill29.i[0]: [ (0, 723): Wna (SU#4416, 0x0) (0, 1500): Wna (SU#4416, 0x30) ]
sink.i[0]: [ (0, 784): Wna (SU#4872, 0x0) (0, 1670): Wna (SU#4872, 0x0) ]
: [ (0, 958): Wna (SU#5888, 0x0) (0, 1421): Wna (SU#5888, 0) ]
self.dbg.spill30.i[0]: [ (0, 721): Wna (SU#4400, 0x0) (0, 1501): Wna (SU#4400, 0x30) ]
: [ (1, 14): Wna (SU#9512, 0x0) (1, 15): Wna (SU#9512, 0xe0) ]
data.i[8]: [ (0, 797): Wna (SU#4968, 0x0) (0, 1513): Wna (SU#4968, 0) ]
self.dbg.spill23.i[0]: [ (0, 733): Wna (SU#4496, 0x0) (0, 1494): Wna (SU#4496, 0x40000000000013a8) ]
name.i[16]: [ (0, 814): Wna (SU#5096, 0x0) (0, 888): Wna (SU#5096, 0) ]
: [ (0, 751): Wna (SU#4624, 0x0) (0, 1518): Wna (SU#4624, 1) ]
main.i[24]: [ (0, 782): Wna (SU#4856, 0x0) (0, 1736): Wna (SU#4856, 0x10) ]
: [ (0, 370): Wna (SU#2112, 0x0) (0, 2106): Wna (SU#2112, 1) ]
dst.dbg.spill.i[0]: [ (0, 719): Wna (SU#4384, 0x0) (0, 1502): Wna (SU#4384, 0x30) ]
main.i[8]: [ (0, 780): Wna (SU#4840, 0x0) (0, 1738): Wna (SU#4840, 0x70) ]
: [ (0, 368): Wna (SU#2096, 0x0) (0, 2102): Wna (SU#2096, 48) ]
this.i.i[0]: [ (0, 1038): Wna (SU#6424, 0x0) (0, 1440): Wna (SU#6424, 0x30) ]
_sink.i[0]: [ (0, 747): Wna (SU#4600, 0x0) (0, 1613): Wna (SU#4600, 0x0) ]
self.dbg.spill25.i[0]: [ (0, 729): Wna (SU#4464, 0x0) (0, 1496): Wna (SU#4464, 0x40000000000013a8) ]
old_size.dbg.spill.i[0]: [ (0, 715): Wna (SU#4360, 0x0) (0, 1506): Wna (SU#4360, 1) ]
self1[16]: [ (0, 856): Wna (SU#5376, 0x0) (0, 2099): Wna (SU#5376, 1) ]
: [ (1, 251): Wna (SU#11048, 0x0) (1, 259): Wna (SU#11048, 0) ]
self.dbg.spill27.i[0]: [ (0, 727): Wna (SU#4448, 0x0) (0, 1498): Wna (SU#4448, 0x30) ]
self[24]: [ (0, 365): Wna (SU#2072, 0x0) (0, 375): Wna (SU#2072, 0) ]
: [ (0, 713): Wna (SU#4344, 0x0) (0, 1609): Wna (SU#4344, 1) ]
self1[0]: [ (0, 854): Wna (SU#5360, 0x0) (0, 2095): Wna (SU#5360, 48) ]
: [ (1, 248): Wna (SU#11032, 0x0) (1, 317): Wna (SU#11032, 0x0) ]
self.dbg.spill28.i[0]: [ (0, 725): Wna (SU#4432, 0x0) (0, 1499): Wna (SU#4432, 0x30) ]
_sink[0]: [ (1, 235): Wna (SU#10928, 0x0) (1, 262): Wna (SU#10928, 0x0) ]
self[8]: [ (0, 363): Wna (SU#2056, 0x0) (0, 379): Wna (SU#2056, 0) ]
: [ (0, 1032): Wna (SU#6384, 0x0) (0, 1395): Wna (SU#6384, 1) ]
data.i[24]: [ (0, 799): Wna (SU#4984, 0x0) (0, 1517): Wna (SU#4984, 0) ]
b22.i[0]: [ (0, 741): Wna (SU#4552, 0x0) (0, 1817): Wna (SU#4552, 0xb0) ]
: [ (0, 743): Wna (SU#4568, 0x0) (0, 1730): Wna (SU#4568, 0x10) ]
_sink21.i[0]: [ (0, 745): Wna (SU#4584, 0x0) (0, 1672): Wna (SU#4584, 0x0) ]
: [ (1, 33): Wna (SU#9624, 0x0) (1, 35): Wna (SU#9624, 0x8000000000000308) ]
name.i[0]: [ (0, 812): Wna (SU#5080, 0x0) (0, 884): Wna (SU#5080, -9223372036854775808) ]
dst.dbg.spill.i8.i[0]: [ (0, 924): Wna (SU#5624, 0x0) (0, 1414): Wna (SU#5624, 0x40000000000018c0) ]
scope_data.i[0]: [ (0, 816): Wna (SU#5112, 0x0) (0, 880): Wna (SU#5112, 0x0) ]
_70.i[0]: [ (0, 753): Wna (SU#4640, 0x0) (0, 1520): Wna (SU#4640, 1) ]
f.i[0]: [ (0, 818): Wna (SU#5128, 0x0) (0, 879): Wna (SU#5128, 0x10) ]
_70.i[16]: [ (0, 755): Wna (SU#4656, 0x0) (0, 1524): Wna (SU#4656, 0) ]
val.dbg.spill14.i[0]: [ (0, 821): Wna (SU#5144, 0x0) (0, 877): Wna (SU#5144, 1) ]
_70.i[32]: [ (0, 757): Wna (SU#4672, 0x0) (0, 1528): Wna (SU#4672, 0) ]
val.dbg.spill12.i[0]: [ (0, 824): Wna (SU#5160, 0x0) (0, 875): Wna (SU#5160, 1) ]
: [ (0, 881): Wna (SU#4694, 1) (0, 882): Wna (SU#4695, 1) ]
sink.dbg.spill.i[0]: [ (0, 826): Wna (SU#5176, 0x0) (0, 874): Wna (SU#5176, 0x0) ]
self20.i[8]: [ (0, 765): Wna (SU#4720, 0x0) (0, 2083): Wna (SU#4720, 0x1) ]
self[0]: [ (1, 301): Wna (SU#11336, 0x0) (1, 303): Wna (SU#11336, 0) ]
: [ (0, 767): Wna (SU#4736, 0x0) (0, 2087): Wna (SU#4736, 0) ]
val.dbg.spill9.i[0]: [ (0, 829): Wna (SU#5192, 0x0) (0, 872): Wna (SU#5192, 1) ]
val.dbg.spill7.i[0]: [ (0, 832): Wna (SU#5208, 0x0) (0, 870): Wna (SU#5208, 1) ]
value.dbg.spill4.i[0]: [ (0, 834): Wna (SU#5224, 0x0) (0, 869): Wna (SU#5224, 1) ]
v.dbg.spill3.i[0]: [ (0, 836): Wna (SU#5240, 0x0) (0, 868): Wna (SU#5240, 1) ]
v.dbg.spill.i[0]: [ (0, 840): Wna (SU#5264, 0x0) (0, 866): Wna (SU#5264, 1) ]
val.dbg.spill1.i[0]: [ (0, 843): Wna (SU#5280, 0x0) (0, 864): Wna (SU#5280, 1) ]
val.dbg.spill.i[0]: [ (0, 846): Wna (SU#5296, 0x0) (0, 862): Wna (SU#5296, 1) ]
default.dbg.spill.i[0]: [ (0, 848): Wna (SU#5312, 0x0) (0, 861): Wna (SU#5312, 2097152) ]
new.dbg.spill.i.i[0]: [ (0, 920): Wna (SU#5592, 0x0) (0, 1416): Wna (SU#5592, 1) ]
old.dbg.spill.i.i[0]: [ (0, 922): Wna (SU#5608, 0x0) (0, 1415): Wna (SU#5608, 0) ]
: [ (0, 962): Wna (SU#5920, 0x0) (0, 1425): Wna (SU#5920, 0) ]
: [ (0, 663): Wna (SU#3976, 0x0) (0, 2064): Wna (SU#3976, 0x4000000000000fc0) ]
: [ (0, 664): Wna (SU#3984, 0x0) (0, 2065): Wna (SU#3984, 0x4000000000000fb0) ]
: [ (0, 668): Wna (SU#4008, 0x0) (0, 2072): Wna (SU#4008, 2097152) ]
v2.i[0]: [ (0, 670): Wna (SU#4016, 0x0) (0, 2062): Wna (SU#4016, 16384) ]
v1.i[0]: [ (0, 672): Wna (SU#4032, 0x0) (0, 2061): Wna (SU#4032, 2097152) ]
x.i21[0]: [ (0, 674): Wna (SU#4048, 0x0) (0, 1820): Wna (SU#4048, 0xb0) ]
x.i21[8]: [ (0, 675): Wna (SU#4056, 0x0) (0, 1821): Wna (SU#4056, 0x8000000000000308) ]
u14.i[0]: [ (0, 677): Wna (SU#4072, 0x0) (0, 1948): Wna (SU#4072, 0) (0, 1949): Wna (SU#4072, 0) (0, 1950): Wna (SU#4072, 0) (0, 1951): Wna (SU#4072, 0) (0, 1952): Wna (SU#4072, 0) (0, 1953): Wna (SU#4072, 0) (0, 1954): Wna (SU#4072, 0) (0, 1955): Wna (SU#4072, 0) (0, 1956): Wna (SU#4072, 0) (0, 1957): Wna (SU#4072, 0) (0, 1958): Wna (SU#4072, 0) (0, 1959): Wna (SU#4072, 0) (0, 1960): Wna (SU#4072, 0) (0, 1961): Wna (SU#4072, 0) (0, 1962): Wna (SU#4072, 0) (0, 1963): Wna (SU#4072, 0) (0, 1964): Wna (SU#4072, 0) (0, 1965): Wna (SU#4072, 0) (0, 1966): Wna (SU#4072, 0) (0, 1967): Wna (SU#4072, 0) (0, 1968): Wna (SU#4072, 0) (0, 1969): Wna (SU#4072, 0) (0, 1970): Wna (SU#4072, 0) (0, 1971): Wna (SU#4072, 0) (0, 1972): Wna (SU#4072, 0) (0, 1973): Wna (SU#4072, 0) (0, 1974): Wna (SU#4072, 0) (0, 1975): Wna (SU#4072, 0) (0, 1976): Wna (SU#4072, 0) (0, 1977): Wna (SU#4072, 0) (0, 1978): Wna (SU#4072, 0) (0, 1979): Wna (SU#4072, 0) (0, 1980): Wna (SU#4072, 0) (0, 1981): Wna (SU#4072, 0) (0, 1982): Wna (SU#4072, 0) (0, 1983): Wna (SU#4072, 0) (0, 1984): Wna (SU#4072, 0) (0, 1985): Wna (SU#4072, 0) (0, 1986): Wna (SU#4072, 0) (0, 1987): Wna (SU#4072, 0) (0, 1988): Wna (SU#4072, 0) (0, 1989): Wna (SU#4072, 0) (0, 1990): Wna (SU#4072, 0) (0, 1991): Wna (SU#4072, 0) (0, 1992): Wna (SU#4072, 0) (0, 1993): Wna (SU#4072, 0) (0, 1994): Wna (SU#4072, 0) (0, 1995): Wna (SU#4072, 0) (0, 1996): Wna (SU#4072, 0) (0, 1997): Wna (SU#4072, 0) (0, 1998): Wna (SU#4072, 0) (0, 1999): Wna (SU#4072, 0) (0, 2000): Wna (SU#4072, 0) (0, 2001): Wna (SU#4072, 0) (0, 2002): Wna (SU#4072, 0) (0, 2003): Wna (SU#4072, 0) ]
u.i[0]: [ (0, 685): Wna (SU#4136, 0x0) (0, 1913): Wna (SU#4136, 0) (0, 1914): Wna (SU#4136, 0) (0, 1915): Wna (SU#4136, 0) (0, 1916): Wna (SU#4136, 0) (0, 1917): Wna (SU#4136, 0) (0, 1918): Wna (SU#4136, 0) (0, 1919): Wna (SU#4136, 0) (0, 1920): Wna (SU#4136, 0) ]
b.i8[0]: [ (0, 687): Wna (SU#4152, 0x0) (0, 1886): Wna (SU#4152, 0xe0) ]
attr.i[0]: [ (0, 691): Wna (SU#4176, 0x0) (0, 2004): Wna (SU#4176, 0) (0, 2005): Wna (SU#4176, 0) (0, 2006): Wna (SU#4176, 0) (0, 2007): Wna (SU#4176, 0) (0, 2008): Wna (SU#4176, 0) (0, 2009): Wna (SU#4176, 0) (0, 2010): Wna (SU#4176, 0) (0, 2011): Wna (SU#4176, 0) (0, 2012): Wna (SU#4176, 0) (0, 2013): Wna (SU#4176, 0) (0, 2014): Wna (SU#4176, 0) (0, 2015): Wna (SU#4176, 0) (0, 2016): Wna (SU#4176, 0) (0, 2017): Wna (SU#4176, 0) (0, 2018): Wna (SU#4176, 0) (0, 2019): Wna (SU#4176, 0) (0, 2020): Wna (SU#4176, 0) (0, 2021): Wna (SU#4176, 0) (0, 2022): Wna (SU#4176, 0) (0, 2023): Wna (SU#4176, 0) (0, 2024): Wna (SU#4176, 0) (0, 2025): Wna (SU#4176, 0) (0, 2026): Wna (SU#4176, 0) (0, 2027): Wna (SU#4176, 0) (0, 2028): Wna (SU#4176, 0) (0, 2029): Wna (SU#4176, 0) (0, 2030): Wna (SU#4176, 0) (0, 2031): Wna (SU#4176, 0) (0, 2032): Wna (SU#4176, 0) (0, 2033): Wna (SU#4176, 0) (0, 2034): Wna (SU#4176, 0) (0, 2035): Wna (SU#4176, 0) (0, 2036): Wna (SU#4176, 0) (0, 2037): Wna (SU#4176, 0) (0, 2038): Wna (SU#4176, 0) (0, 2039): Wna (SU#4176, 0) (0, 2040): Wna (SU#4176, 0) (0, 2041): Wna (SU#4176, 0) (0, 2042): Wna (SU#4176, 0) (0, 2043): Wna (SU#4176, 0) (0, 2044): Wna (SU#4176, 0) (0, 2045): Wna (SU#4176, 0) (0, 2046): Wna (SU#4176, 0) (0, 2047): Wna (SU#4176, 0) (0, 2048): Wna (SU#4176, 0) (0, 2049): Wna (SU#4176, 0) (0, 2050): Wna (SU#4176, 0) (0, 2051): Wna (SU#4176, 0) (0, 2052): Wna (SU#4176, 0) (0, 2053): Wna (SU#4176, 0) (0, 2054): Wna (SU#4176, 0) (0, 2055): Wna (SU#4176, 0) (0, 2056): Wna (SU#4176, 0) (0, 2057): Wna (SU#4176, 0) (0, 2058): Wna (SU#4176, 0) (0, 2059): Wna (SU#4176, 0) ]
native.i[0]: [ (0, 699): Wna (SU#4240, 0x0) (0, 1922): Wna (SU#4240, 0) (0, 2075): Wna (SU#4240, 1) ]
: [ (0, 701): Wna (SU#4256, 0x0) (0, 2079): Wna (SU#4256, 0) ]
: [ (0, 702): Wna (SU#4264, 0x0) (0, 2078): Wna (SU#4264, 1) ]
: [ (0, 709): Wna (SU#4312, 0x0) (0, 1490): Wna (SU#4312, 0x30) ]
: [ (0, 717): Wna (SU#4376, 0x0) (0, 1505): Wna (SU#4376, 1) ]
self.dbg.spill.i[0]: [ (0, 735): Wna (SU#4504, 0x0) (0, 1493): Wna (SU#4504, 0x40000000000013a8) ]
b.i[0]: [ (0, 749): Wna (SU#4616, 0x0) (0, 1603): Wna (SU#4616, 0x70) ]
_70.i[8]: [ (0, 754): Wna (SU#4648, 0x0) (0, 1522): Wna (SU#4648, 1) ]
_70.i[24]: [ (0, 756): Wna (SU#4664, 0x0) (0, 1526): Wna (SU#4664, 0) ]
_70.i[40]: [ (0, 758): Wna (SU#4680, 0x0) (0, 1530): Wna (SU#4680, 0) ]
self20.i[0]: [ (0, 764): Wna (SU#4712, 0x0) (0, 2082): Wna (SU#4712, 0) ]
: [ (0, 768): Wna (SU#4744, 0x0) (0, 2086): Wna (SU#4744, 1) ]
: [ (0, 771): Wna (SU#4768, 0x0) (0, 2093): Wna (SU#4768, 0x70) ]
_31.i[8]: [ (0, 775): Wna (SU#4800, 0x0) (0, 1744): Wna (SU#4800, 112) ]
_31.i[24]: [ (0, 777): Wna (SU#4816, 0x0) (0, 1748): Wna (SU#4816, 16) ]
main.i[0]: [ (0, 779): Wna (SU#4832, 0x0) (0, 1733): Wna (SU#4832, 0x30) ]
main.i[16]: [ (0, 781): Wna (SU#4848, 0x0) (0, 1735): Wna (SU#4848, 0x0) ]
: [ (0, 786): Wna (SU#4888, 0x0) (0, 1727): Wna (SU#4888, 0x0) ]
data.i[16]: [ (0, 798): Wna (SU#4976, 0x0) (0, 1515): Wna (SU#4976, 0) ]
my_packet.i[0]: [ (0, 801): Wna (SU#5000, 0x0) (0, 1605): Wna (SU#5000, 0x70) ]
stack_size.i[0]: [ (0, 809): Wna (SU#5056, 0x0) (0, 891): Wna (SU#5056, 0) ]
name.i[8]: [ (0, 813): Wna (SU#5088, 0x0) (0, 886): Wna (SU#5088, 0) ]
value.dbg.spill.i[0]: [ (0, 838): Wna (SU#5256, 0x0) (0, 867): Wna (SU#5256, 1) ]
self1[8]: [ (0, 855): Wna (SU#5368, 0x0) (0, 2097): Wna (SU#5368, 112) ]
: [ (0, 961): Wna (SU#5912, 0x0) (0, 1426): Wna (SU#5912, 0) ]
dst.dbg.spill.i.i[0]: [ (0, 978): Wna (SU#6000, 0x0) (0, 1384): Wna (SU#6000, 0x40000000000018f8) ]
pieces.dbg.spill.i.i[0]: [ (0, 1021): Wna (SU#6304, 0x0) (0, 1377): Wna (SU#6304, 0x8000000000000718) ]
self.i1.i[0]: [ (0, 1024): Wna (SU#6320, 0x0) (0, 1432): Wna (SU#6320, 1) ]
: [ (0, 1026): Wna (SU#6336, 0x0) (0, 1397): Wna (SU#6336, 0) (0, 1398): Wna (SU#6336, 0) (0, 1399): Wna (SU#6336, 0) (0, 1400): Wna (SU#6336, 0) (0, 1401): Wna (SU#6336, 0) (0, 1402): Wna (SU#6336, 0) (0, 1403): Wna (SU#6336, 0) (0, 1404): Wna (SU#6336, 0) (0, 1420): CWrlx (SU#6336, 1) ]

Trace to (1, 409):
[main] atomic.rs: 2194: Self {v: UnsafeCell::new(v)}
[main] atomic.rs: 2194: Self {v: UnsafeCell::new(v)}
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 131: self.size
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] non_null.rs: 249: Some(unsafe { Self::new_unchecked(ptr) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 332: match Global.allocate(layout) {
[main] alloc.rs: 333: Ok(ptr) => ptr.as_mut_ptr(),
[main] alloc.rs: 336: }
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] manually_drop.rs: 74: ManuallyDrop { value }
[main] boxed.rs: 1162: let ptr = addr_of_mut!(**b);
[main] main.rs: 21: let foo = Arc::new(MyStruct::new(0));
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] sync.rs: 2138: unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
[main] sync.rs: 2139: }
[main] main.rs: 23: let foo_clone1 = foo.clone();
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] sync.rs: 2138: unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
[main] sync.rs: 2139: }
[main] main.rs: 24: let foo_clone2 = foo.clone();
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] option.rs: 990: pub fn unwrap_or(self, default: T) -> T {
[main] option.rs: 990: pub fn unwrap_or(self, default: T) -> T {
[main] option.rs: 990: pub fn unwrap_or(self, default: T) -> T {
[main] option.rs: 990: pub fn unwrap_or(self, default: T) -> T {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] atomic.rs: 2193: pub const fn new(v: $int_type) -> Self {
[main] cell.rs: 2078: pub const fn new(value: T) -> UnsafeCell<T> {
[main] atomic.rs: 2193: pub const fn new(v: $int_type) -> Self {
[main] cell.rs: 2078: pub const fn new(value: T) -> UnsafeCell<T> {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] stdio.rs: 1070: pub fn set_output_capture(sink: Option<LocalStream>) -> Option<LocalStream> {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] boxed.rs: 1049: pub const unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
[main] boxed.rs: 1049: pub const unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] option.rs: 991: match self {
[main] option.rs: 993: None => default,
[main] option.rs: 1215: match self {
[main] option.rs: 1215: match self {
[main] mod.rs: 1387: Self::new_inner(ThreadName::Unnamed)
[main] mod.rs: 1387: Self::new_inner(ThreadName::Unnamed)
[main] mod.rs: 1387: Self::new_inner(ThreadName::Unnamed)
[main] mod.rs: 1387: Self::new_inner(ThreadName::Unnamed)
[main] layout.rs: 122: unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
[main] layout.rs: 122: unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
[main] layout.rs: 122: unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
[main] layout.rs: 122: unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 383: let new_align = cmp::max(self.align, next.align);
[main] layout.rs: 383: let new_align = cmp::max(self.align, next.align);
[main] cmp.rs: 1356: match compare(&v1, &v2) {
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] alignment.rs: 209: self.as_nonzero().get().cmp(&other.as_nonzero().get())
[main] alignment.rs: 209: self.as_nonzero().get().cmp(&other.as_nonzero().get())
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] nonzero.rs: 359: unsafe { intrinsics::transmute_unchecked(n) }
[main] nonzero.rs: 373: match Self::new(n) {
[main] nonzero.rs: 374: Some(n) => n,
[main] nonzero.rs: 446: unsafe { intrinsics::transmute_unchecked(self) }
[main] alignment.rs: 209: self.as_nonzero().get().cmp(&other.as_nonzero().get())
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] nonzero.rs: 359: unsafe { intrinsics::transmute_unchecked(n) }
[main] nonzero.rs: 373: match Self::new(n) {
[main] nonzero.rs: 374: Some(n) => n,
[main] nonzero.rs: 446: unsafe { intrinsics::transmute_unchecked(self) }
[main] cmp.rs: 1576: crate::intrinsics::three_way_compare(*self, *other)
[main] cmp.rs: 1576: crate::intrinsics::three_way_compare(*self, *other)
[main] alignment.rs: 210: }
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] cmp.rs: 1356: match compare(&v1, &v2) {
[main] cmp.rs: 1356: match compare(&v1, &v2) {
[main] cmp.rs: 1357: Ordering::Less | Ordering::Equal => v2,
[main] cmp.rs: 1357: Ordering::Less | Ordering::Equal => v2,
[main] cmp.rs: 1360: }
[main] cmp.rs: 1360: }
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] layout.rs: 131: self.size
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] uint_macros.rs: 468: Some(unsafe { intrinsics::unchecked_add(self, rhs) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] layout.rs: 386: let offset = self.size().checked_add(pad).ok_or(LayoutError)?;
[main] layout.rs: 131: self.size
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] uint_macros.rs: 468: Some(unsafe { intrinsics::unchecked_add(self, rhs) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] layout.rs: 387: let new_size = offset.checked_add(next.size()).ok_or(LayoutError)?;
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] layout.rs: 106: Ok(Layout { size, align })
[main] layout.rs: 106: Ok(Layout { size, align })
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] layout.rs: 390: let layout = Layout::from_size_alignment(new_size, new_align)?;
[main] layout.rs: 390: let layout = Layout::from_size_alignment(new_size, new_align)?;
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 392: }
[main] result.rs: 1100: match self {
[main] result.rs: 1101: Ok(t) => t,
[main] result.rs: 1101: Ok(t) => t,
[main] result.rs: 1101: Ok(t) => t,
[main] result.rs: 1101: Ok(t) => t,
[main] result.rs: 1101: Ok(t) => t,
[main] result.rs: 1101: Ok(t) => t,
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] layout.rs: 131: self.size
[main] sync.rs: 1891: let layout = arcinner_layout_for_value_layout(value_layout);
[main] sync.rs: 1891: let layout = arcinner_layout_for_value_layout(value_layout);
[main] sync.rs: 1893: let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));
[main] sync.rs: 1893: let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 131: self.size
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] non_null.rs: 249: Some(unsafe { Self::new_unchecked(ptr) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] sync.rs: 1893: let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));
[main] sync.rs: 1893: let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));
[main] result.rs: 1454: match self {
[main] result.rs: 1455: Ok(t) => t,
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] atomic.rs: 2194: Self {v: UnsafeCell::new(v)}
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] sync.rs: 1896: }
[main] sync.rs: 284: Self { ptr, phantom: PhantomData, alloc }
[main] sync.rs: 2426: unsafe { &mut (*this.ptr.as_ptr()).data }
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 340: pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
[main] mod.rs: 340: pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
[main] panic_info.rs: 37: can_unwind: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 37: can_unwind: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] atomic.rs: 3312: match order {
[main] atomic.rs: 3313: Relaxed => intrinsics::atomic_load_relaxed(dst),
[main] atomic.rs: 3313: Relaxed => intrinsics::atomic_load_relaxed(dst),
[main] atomic.rs: 3320: }
[main] atomic.rs: 2421: unsafe { atomic_load(self.v.get(), order) }
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] mod.rs: 1245: let Some(id) = last.checked_add(1) else {
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] uint_macros.rs: 468: Some(unsafe { intrinsics::unchecked_add(self, rhs) })
[main] mod.rs: 1245: let Some(id) = last.checked_add(1) else {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 340: pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
[main] mod.rs: 340: pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
[main] panic_info.rs: 37: can_unwind: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 37: can_unwind: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] atomic.rs: 3419: match (success, failure) {
[main] atomic.rs: 3419: match (success, failure) {
[main] atomic.rs: 3420: (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),
[main] atomic.rs: 3420: (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),
[main] atomic.rs: 3420: (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),
[main] atomic.rs: 3418: let (val, ok) = unsafe {
[main] atomic.rs: 3418: let (val, ok) = unsafe {
[main] atomic.rs: 3439: if ok { Ok(val) } else { Err(val) }
[main] atomic.rs: 3439: if ok { Ok(val) } else { Err(val) }
[main] atomic.rs: 3440: }
[main] atomic.rs: 3440: }
[main] atomic.rs: 2642: atomic_compare_exchange_weak(self.v.get(), current, new, success, failure)
[main] atomic.rs: 2642: atomic_compare_exchange_weak(self.v.get(), current, new, success, failure)
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] nonzero.rs: 359: unsafe { intrinsics::transmute_unchecked(n) }
[main] option.rs: 968: match self {
[main] option.rs: 969: Some(val) => val,
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] atomic.rs: 2194: Self {v: UnsafeCell::new(v)}
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1407: Pin::new_unchecked(arc.assume_init())
[main] manually_drop.rs: 74: ManuallyDrop { value }
[main] sync.rs: 279: (this.ptr, unsafe { ptr::read(&this.alloc) })
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] option.rs: 1217: None => default(),
[main] option.rs: 1219: }
[main] mod.rs: 480: let my_thread = name.map_or_else(Thread::new_unnamed, Thread::new);
[main] mod.rs: 481: let their_thread = my_thread.clone();
[main] mod.rs: 1355: #[derive(Clone)]
[main] pin.rs: 1089: #[derive(Copy, Clone)]
[main] sync.rs: 1837: unsafe { self.ptr.as_ref() }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] non_null.rs: 351: self.pointer as *mut T
[main] sync.rs: 2117: let old_size = self.inner().strong.fetch_add(1, Relaxed);
[main] atomic.rs: 2673: unsafe { atomic_add(self.v.get(), val, order) }
[main] cell.rs: 2148: self as *const UnsafeCell<T> as *const T as *mut T
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] sync.rs: 2138: unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
[main] mod.rs: 1355: #[derive(Clone)]
[main] mod.rs: 484: scope: scope_data,
[main] mod.rs: 485: result: UnsafeCell::new(None),
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] atomic.rs: 2194: Self {v: UnsafeCell::new(v)}
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 131: self.size
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] non_null.rs: 249: Some(unsafe { Self::new_unchecked(ptr) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 332: match Global.allocate(layout) {
[main] alloc.rs: 333: Ok(ptr) => ptr.as_mut_ptr(),
[main] alloc.rs: 336: }
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] manually_drop.rs: 74: ManuallyDrop { value }
[main] boxed.rs: 1162: let ptr = addr_of_mut!(**b);
[main] sync.rs: 284: Self { ptr, phantom: PhantomData, alloc }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] sync.rs: 2138: unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
[main] sync.rs: 284: Self { ptr, phantom: PhantomData, alloc }
[main] stdio.rs: 1071: try_set_output_capture(sink).expect(
[main] mod.rs: 543: pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
[main] result.rs: 1057: match self {
[main] result.rs: 1058: Ok(t) => t,
[main] result.rs: 1061: }
[main] stdio.rs: 1071: try_set_output_capture(sink).expect(
[main] option.rs: 2044: match self {
[main] option.rs: 2046: None => None,
[main] stdio.rs: 1071: try_set_output_capture(sink).expect(
[main] stdio.rs: 1071: try_set_output_capture(sink).expect(
[main] mod.rs: 543: pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
[main] result.rs: 1057: match self {
[main] result.rs: 1058: Ok(t) => t,
[main] result.rs: 1061: }
[main] stdio.rs: 1071: try_set_output_capture(sink).expect(
[main] mod.rs: 543: pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
[main] mod.rs: 518: let f = MaybeDangling::new(f);
[main] maybe_uninit.rs: 287: MaybeUninit { value: ManuallyDrop::new(val) }
[main] mod.rs: 500: MaybeDangling(mem::MaybeUninit::new(x))
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] mod.rs: 544: if let Some(scope_data) = &my_packet.scope {
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 131: self.size
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] non_null.rs: 249: Some(unsafe { Self::new_unchecked(ptr) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 332: match Global.allocate(layout) {
[main] alloc.rs: 333: Ok(ptr) => ptr.as_mut_ptr(),
[main] alloc.rs: 336: }
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] manually_drop.rs: 74: ManuallyDrop { value }
[main] boxed.rs: 1162: let ptr = addr_of_mut!(**b);
[main] mod.rs: 568: native: unsafe { imp::Thread::new(stack_size, main)? },
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 131: self.size
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] non_null.rs: 249: Some(unsafe { Self::new_unchecked(ptr) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 332: match Global.allocate(layout) {
[main] alloc.rs: 333: Ok(ptr) => ptr.as_mut_ptr(),
[main] alloc.rs: 336: }
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] manually_drop.rs: 74: ManuallyDrop { value }
[main] boxed.rs: 1162: let ptr = addr_of_mut!(**b);
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] uint_macros.rs: 79: return intrinsics::ctpop(self);
[main] uint_macros.rs: 79: return intrinsics::ctpop(self);
[main] ub_checks.rs: 72: }
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] maybe_uninit.rs: 401: u
[main] manually_drop.rs: 92: slot.value
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] uint_macros.rs: 79: return intrinsics::ctpop(self);
[main] uint_macros.rs: 79: return intrinsics::ctpop(self);
[main] ub_checks.rs: 72: }
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] thread.rs: 56: assert_eq!(libc::pthread_attr_init(&mut attr), 0);
[main] cmp.rs: 1356: match compare(&v1, &v2) {
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] cmp.rs: 1576: crate::intrinsics::three_way_compare(*self, *other)
[main] cmp.rs: 1576: crate::intrinsics::three_way_compare(*self, *other)
[main] cmp.rs: 1356: match compare(&v1, &v2) {
[main] cmp.rs: 1358: Ordering::Greater => v1,
[main] cmp.rs: 1358: Ordering::Greater => v1,
[main] cmp.rs: 1360: }
[main] thread.rs: 88: let ret = libc::pthread_create(&mut native, &attr, thread_start, p as *mut _);
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] boxed.rs: 2070: <F as FnOnce<Args>>::call_once(*self, args)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 1326: match self {
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 1329: ThreadName::Unnamed => None,
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 1329: ThreadName::Unnamed => None,
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 1523: }
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 1523: }
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 520: if let Some(name) = their_thread.cname() {
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 520: if let Some(name) = their_thread.cname() {
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 520: if let Some(name) = their_thread.cname() {
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 524: crate::io::set_output_capture(output_capture);
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] stdio.rs: 1071: try_set_output_capture(sink).expect(
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 543: pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] result.rs: 1057: match self {
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] result.rs: 1058: Ok(t) => t,
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] result.rs: 1061: }
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] stdio.rs: 1071: try_set_output_capture(sink).expect(
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 543: pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 526: let f = f.into_inner();
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 526: let f = f.into_inner();
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 1326: crate::intrinsics::read_via_copy(src)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] panicking.rs: 508: let mut data = Data { f: ManuallyDrop::new(f) };
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] mod.rs: 1326: crate::intrinsics::read_via_copy(src)
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[_ZN3std3sys3pal4unix6thread6Thread3new12thread_start17h0e871c5cb25b9f47E] cell.rs: 536: unsafe { *self.value.get() }
Trace to (0, 2399):
[main] atomic.rs: 2194: Self {v: UnsafeCell::new(v)}
[main] atomic.rs: 2194: Self {v: UnsafeCell::new(v)}
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 131: self.size
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] non_null.rs: 249: Some(unsafe { Self::new_unchecked(ptr) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 332: match Global.allocate(layout) {
[main] alloc.rs: 333: Ok(ptr) => ptr.as_mut_ptr(),
[main] alloc.rs: 336: }
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] manually_drop.rs: 74: ManuallyDrop { value }
[main] boxed.rs: 1162: let ptr = addr_of_mut!(**b);
[main] main.rs: 21: let foo = Arc::new(MyStruct::new(0));
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] sync.rs: 2138: unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
[main] sync.rs: 2139: }
[main] main.rs: 23: let foo_clone1 = foo.clone();
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] sync.rs: 2138: unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
[main] sync.rs: 2139: }
[main] main.rs: 24: let foo_clone2 = foo.clone();
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] mod.rs: 293: Builder { name: None, stack_size: None }
[main] option.rs: 990: pub fn unwrap_or(self, default: T) -> T {
[main] option.rs: 990: pub fn unwrap_or(self, default: T) -> T {
[main] option.rs: 990: pub fn unwrap_or(self, default: T) -> T {
[main] option.rs: 990: pub fn unwrap_or(self, default: T) -> T {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] atomic.rs: 2193: pub const fn new(v: $int_type) -> Self {
[main] cell.rs: 2078: pub const fn new(value: T) -> UnsafeCell<T> {
[main] atomic.rs: 2193: pub const fn new(v: $int_type) -> Self {
[main] cell.rs: 2078: pub const fn new(value: T) -> UnsafeCell<T> {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] stdio.rs: 1070: pub fn set_output_capture(sink: Option<LocalStream>) -> Option<LocalStream> {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 2671: pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] atomic.rs: 3342: unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
[main] boxed.rs: 1049: pub const unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
[main] boxed.rs: 1049: pub const unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] mod.rs: 476: let Builder { name, stack_size } = self;
[main] option.rs: 991: match self {
[main] option.rs: 993: None => default,
[main] option.rs: 1215: match self {
[main] option.rs: 1215: match self {
[main] mod.rs: 1387: Self::new_inner(ThreadName::Unnamed)
[main] mod.rs: 1387: Self::new_inner(ThreadName::Unnamed)
[main] mod.rs: 1387: Self::new_inner(ThreadName::Unnamed)
[main] mod.rs: 1387: Self::new_inner(ThreadName::Unnamed)
[main] layout.rs: 122: unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
[main] layout.rs: 122: unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
[main] layout.rs: 122: unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
[main] layout.rs: 122: unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 383: let new_align = cmp::max(self.align, next.align);
[main] layout.rs: 383: let new_align = cmp::max(self.align, next.align);
[main] cmp.rs: 1356: match compare(&v1, &v2) {
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] alignment.rs: 209: self.as_nonzero().get().cmp(&other.as_nonzero().get())
[main] alignment.rs: 209: self.as_nonzero().get().cmp(&other.as_nonzero().get())
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] nonzero.rs: 359: unsafe { intrinsics::transmute_unchecked(n) }
[main] nonzero.rs: 373: match Self::new(n) {
[main] nonzero.rs: 374: Some(n) => n,
[main] nonzero.rs: 446: unsafe { intrinsics::transmute_unchecked(self) }
[main] alignment.rs: 209: self.as_nonzero().get().cmp(&other.as_nonzero().get())
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] nonzero.rs: 359: unsafe { intrinsics::transmute_unchecked(n) }
[main] nonzero.rs: 373: match Self::new(n) {
[main] nonzero.rs: 374: Some(n) => n,
[main] nonzero.rs: 446: unsafe { intrinsics::transmute_unchecked(self) }
[main] cmp.rs: 1576: crate::intrinsics::three_way_compare(*self, *other)
[main] cmp.rs: 1576: crate::intrinsics::three_way_compare(*self, *other)
[main] alignment.rs: 210: }
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] cmp.rs: 1356: match compare(&v1, &v2) {
[main] cmp.rs: 1356: match compare(&v1, &v2) {
[main] cmp.rs: 1357: Ordering::Less | Ordering::Equal => v2,
[main] cmp.rs: 1357: Ordering::Less | Ordering::Equal => v2,
[main] cmp.rs: 1360: }
[main] cmp.rs: 1360: }
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] layout.rs: 131: self.size
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] uint_macros.rs: 468: Some(unsafe { intrinsics::unchecked_add(self, rhs) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] layout.rs: 386: let offset = self.size().checked_add(pad).ok_or(LayoutError)?;
[main] layout.rs: 131: self.size
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] uint_macros.rs: 468: Some(unsafe { intrinsics::unchecked_add(self, rhs) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] layout.rs: 387: let new_size = offset.checked_add(next.size()).ok_or(LayoutError)?;
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] layout.rs: 106: Ok(Layout { size, align })
[main] layout.rs: 106: Ok(Layout { size, align })
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] layout.rs: 390: let layout = Layout::from_size_alignment(new_size, new_align)?;
[main] layout.rs: 390: let layout = Layout::from_size_alignment(new_size, new_align)?;
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 391: Ok((layout, offset))
[main] layout.rs: 392: }
[main] result.rs: 1100: match self {
[main] result.rs: 1101: Ok(t) => t,
[main] result.rs: 1101: Ok(t) => t,
[main] result.rs: 1101: Ok(t) => t,
[main] result.rs: 1101: Ok(t) => t,
[main] result.rs: 1101: Ok(t) => t,
[main] result.rs: 1101: Ok(t) => t,
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] layout.rs: 131: self.size
[main] sync.rs: 1891: let layout = arcinner_layout_for_value_layout(value_layout);
[main] sync.rs: 1891: let layout = arcinner_layout_for_value_layout(value_layout);
[main] sync.rs: 1893: let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));
[main] sync.rs: 1893: let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 131: self.size
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] non_null.rs: 249: Some(unsafe { Self::new_unchecked(ptr) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] sync.rs: 1893: let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));
[main] sync.rs: 1893: let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));
[main] result.rs: 1454: match self {
[main] result.rs: 1455: Ok(t) => t,
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] atomic.rs: 2194: Self {v: UnsafeCell::new(v)}
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] sync.rs: 1896: }
[main] sync.rs: 284: Self { ptr, phantom: PhantomData, alloc }
[main] sync.rs: 2426: unsafe { &mut (*this.ptr.as_ptr()).data }
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 1243: let mut last = COUNTER.load(Ordering::Relaxed);
[main] mod.rs: 340: pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
[main] mod.rs: 340: pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
[main] panic_info.rs: 37: can_unwind: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 37: can_unwind: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] atomic.rs: 3312: match order {
[main] atomic.rs: 3313: Relaxed => intrinsics::atomic_load_relaxed(dst),
[main] atomic.rs: 3313: Relaxed => intrinsics::atomic_load_relaxed(dst),
[main] atomic.rs: 3320: }
[main] atomic.rs: 2421: unsafe { atomic_load(self.v.get(), order) }
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] mod.rs: 1245: let Some(id) = last.checked_add(1) else {
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] mod.rs: 24: intrinsics::unlikely($e)
[main] uint_macros.rs: 468: Some(unsafe { intrinsics::unchecked_add(self, rhs) })
[main] mod.rs: 1245: let Some(id) = last.checked_add(1) else {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] mod.rs: 340: pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
[main] mod.rs: 340: pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
[main] panic_info.rs: 37: can_unwind: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 37: can_unwind: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] panic_info.rs: 38: force_no_backtrace: bool,
[main] atomic.rs: 3419: match (success, failure) {
[main] atomic.rs: 3419: match (success, failure) {
[main] atomic.rs: 3420: (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),
[main] atomic.rs: 3420: (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),
[main] atomic.rs: 3420: (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),
[main] atomic.rs: 3418: let (val, ok) = unsafe {
[main] atomic.rs: 3418: let (val, ok) = unsafe {
[main] atomic.rs: 3439: if ok { Ok(val) } else { Err(val) }
[main] atomic.rs: 3439: if ok { Ok(val) } else { Err(val) }
[main] atomic.rs: 3440: }
[main] atomic.rs: 3440: }
[main] atomic.rs: 2642: atomic_compare_exchange_weak(self.v.get(), current, new, success, failure)
[main] atomic.rs: 2642: atomic_compare_exchange_weak(self.v.get(), current, new, success, failure)
[main] mod.rs: 1249: match COUNTER.compare_exchange_weak(last, id, Ordering::Relaxed, Ordering::Relaxed) {
[main] nonzero.rs: 359: unsafe { intrinsics::transmute_unchecked(n) }
[main] option.rs: 968: match self {
[main] option.rs: 969: Some(val) => val,
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] atomic.rs: 2194: Self {v: UnsafeCell::new(v)}
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
[main] mod.rs: 1407: Pin::new_unchecked(arc.assume_init())
[main] manually_drop.rs: 74: ManuallyDrop { value }
[main] sync.rs: 279: (this.ptr, unsafe { ptr::read(&this.alloc) })
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] option.rs: 1217: None => default(),
[main] option.rs: 1219: }
[main] mod.rs: 480: let my_thread = name.map_or_else(Thread::new_unnamed, Thread::new);
[main] mod.rs: 481: let their_thread = my_thread.clone();
[main] mod.rs: 1355: #[derive(Clone)]
[main] pin.rs: 1089: #[derive(Copy, Clone)]
[main] sync.rs: 1837: unsafe { self.ptr.as_ref() }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] non_null.rs: 351: self.pointer as *mut T
[main] sync.rs: 2117: let old_size = self.inner().strong.fetch_add(1, Relaxed);
[main] atomic.rs: 2673: unsafe { atomic_add(self.v.get(), val, order) }
[main] cell.rs: 2148: self as *const UnsafeCell<T> as *const T as *mut T
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] sync.rs: 2138: unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
[main] mod.rs: 1355: #[derive(Clone)]
[main] mod.rs: 484: scope: scope_data,
[main] mod.rs: 485: result: UnsafeCell::new(None),
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] mod.rs: 483: let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {
[main] atomic.rs: 2194: Self {v: UnsafeCell::new(v)}
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] sync.rs: 390: let x: Box<_> = Box::new(ArcInner {
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 131: self.size
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] non_null.rs: 249: Some(unsafe { Self::new_unchecked(ptr) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 332: match Global.allocate(layout) {
[main] alloc.rs: 333: Ok(ptr) => ptr.as_mut_ptr(),
[main] alloc.rs: 336: }
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] manually_drop.rs: 74: ManuallyDrop { value }
[main] boxed.rs: 1162: let ptr = addr_of_mut!(**b);
[main] sync.rs: 284: Self { ptr, phantom: PhantomData, alloc }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] atomic.rs: 3346: Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
[main] sync.rs: 2138: unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
[main] sync.rs: 284: Self { ptr, phantom: PhantomData, alloc }
[main] stdio.rs: 1071: try_set_output_capture(sink).expect(
[main] mod.rs: 543: pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
[main] result.rs: 1057: match self {
[main] result.rs: 1058: Ok(t) => t,
[main] result.rs: 1061: }
[main] stdio.rs: 1071: try_set_output_capture(sink).expect(
[main] option.rs: 2044: match self {
[main] option.rs: 2046: None => None,
[main] stdio.rs: 1071: try_set_output_capture(sink).expect(
[main] stdio.rs: 1071: try_set_output_capture(sink).expect(
[main] mod.rs: 543: pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
[main] result.rs: 1057: match self {
[main] result.rs: 1058: Ok(t) => t,
[main] result.rs: 1061: }
[main] stdio.rs: 1071: try_set_output_capture(sink).expect(
[main] mod.rs: 543: pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
[main] mod.rs: 518: let f = MaybeDangling::new(f);
[main] maybe_uninit.rs: 287: MaybeUninit { value: ManuallyDrop::new(val) }
[main] mod.rs: 500: MaybeDangling(mem::MaybeUninit::new(x))
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] mod.rs: 519: let main = move || {
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] mod.rs: 544: if let Some(scope_data) = &my_packet.scope {
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] mod.rs: 548: let main = Box::new(main);
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 131: self.size
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] non_null.rs: 249: Some(unsafe { Self::new_unchecked(ptr) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 332: match Global.allocate(layout) {
[main] alloc.rs: 333: Ok(ptr) => ptr.as_mut_ptr(),
[main] alloc.rs: 336: }
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] manually_drop.rs: 74: ManuallyDrop { value }
[main] boxed.rs: 1162: let ptr = addr_of_mut!(**b);
[main] mod.rs: 568: native: unsafe { imp::Thread::new(stack_size, main)? },
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] mod.rs: 768: fn from(t: T) -> T {
[main] layout.rs: 131: self.size
[main] layout.rs: 144: self.align.as_usize()
[main] alignment.rs: 97: self.0 as usize
[main] alignment.rs: 97: self.0 as usize
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 100: __rust_alloc(layout.size(), layout.align())
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] non_null.rs: 249: Some(unsafe { Self::new_unchecked(ptr) })
[main] option.rs: 1246: Some(v) => Ok(v),
[main] option.rs: 1246: Some(v) => Ok(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] alloc.rs: 184: let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 185: Ok(NonNull::slice_from_raw_parts(ptr, size))
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 188: }
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 243: self.alloc_impl(layout, false)
[main] alloc.rs: 332: match Global.allocate(layout) {
[main] alloc.rs: 333: Ok(ptr) => ptr.as_mut_ptr(),
[main] alloc.rs: 336: }
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] boxed.rs: 260: Box::new(x)
[main] manually_drop.rs: 74: ManuallyDrop { value }
[main] boxed.rs: 1162: let ptr = addr_of_mut!(**b);
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] uint_macros.rs: 79: return intrinsics::ctpop(self);
[main] uint_macros.rs: 79: return intrinsics::ctpop(self);
[main] ub_checks.rs: 72: }
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] maybe_uninit.rs: 401: u
[main] manually_drop.rs: 92: slot.value
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] const_ptr.rs: 145: unsafe { mem::transmute(self.cast::<()>()) }
[main] uint_macros.rs: 79: return intrinsics::ctpop(self);
[main] uint_macros.rs: 79: return intrinsics::ctpop(self);
[main] ub_checks.rs: 72: }
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] intrinsics.rs: 3235: write_bytes(dst, val, count)
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] maybe_uninit.rs: 401: u
[main] thread.rs: 56: assert_eq!(libc::pthread_attr_init(&mut attr), 0);
[main] cmp.rs: 1356: match compare(&v1, &v2) {
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] function.rs: 251: extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
[main] cmp.rs: 1576: crate::intrinsics::three_way_compare(*self, *other)
[main] cmp.rs: 1576: crate::intrinsics::three_way_compare(*self, *other)
[main] cmp.rs: 1356: match compare(&v1, &v2) {
[main] cmp.rs: 1358: Ordering::Greater => v1,
[main] cmp.rs: 1358: Ordering::Greater => v1,
[main] cmp.rs: 1360: }
[main] thread.rs: 88: let ret = libc::pthread_create(&mut native, &attr, thread_start, p as *mut _);
[main] thread.rs: 92: assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);
[main] thread.rs: 100: Ok(Thread { id: native })
[main] thread.rs: 100: Ok(Thread { id: native })
[main] thread.rs: 100: Ok(Thread { id: native })
[main] thread.rs: 113: }
[main] thread.rs: 113: }
[main] mod.rs: 568: native: unsafe { imp::Thread::new(stack_size, main)? },
[main] mod.rs: 568: native: unsafe { imp::Thread::new(stack_size, main)? },
[main] result.rs: 1976: match self {
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] result.rs: 1977: Ok(v) => ControlFlow::Continue(v),
[main] mod.rs: 568: native: unsafe { imp::Thread::new(stack_size, main)? },
[main] mod.rs: 569: thread: my_thread,
[main] mod.rs: 570: packet: my_packet,
[main] mod.rs: 554: Ok(JoinInner {
[main] mod.rs: 554: Ok(JoinInner {
[main] mod.rs: 554: Ok(JoinInner {
[main] mod.rs: 554: Ok(JoinInner {
[main] mod.rs: 554: Ok(JoinInner {
[main] mod.rs: 554: Ok(JoinInner {
[main] mod.rs: 554: Ok(JoinInner {
[main] mod.rs: 554: Ok(JoinInner {
[main] mod.rs: 554: Ok(JoinInner {
[main] result.rs: 1976: match self {
[main] mod.rs: 461: Ok(JoinHandle(unsafe { self.spawn_unchecked_(f, None) }?))
[main] mod.rs: 461: Ok(JoinHandle(unsafe { self.spawn_unchecked_(f, None) }?))
[main] mod.rs: 461: Ok(JoinHandle(unsafe { self.spawn_unchecked_(f, None) }?))
[main] mod.rs: 461: Ok(JoinHandle(unsafe { self.spawn_unchecked_(f, None) }?))
[main] mod.rs: 461: Ok(JoinHandle(unsafe { self.spawn_unchecked_(f, None) }?))
[main] mod.rs: 461: Ok(JoinHandle(unsafe { self.spawn_unchecked_(f, None) }?))
[main] mod.rs: 462: }
[main] result.rs: 1057: match self {
[main] result.rs: 1057: match self {
[main] result.rs: 1058: Ok(t) => t,
[main] result.rs: 1058: Ok(t) => t,
[main] result.rs: 1058: Ok(t) => t,
[main] result.rs: 1058: Ok(t) => t,
[main] result.rs: 1058: Ok(t) => t,
[main] result.rs: 1058: Ok(t) => t,
[main] result.rs: 1061: }
[main] mod.rs: 686: }
[main] non_null.rs: 402: unsafe { &*self.as_ptr().cast_const() }
[main] cell.rs: 536: unsafe { *self.value.get() }
[main] mod.rs: 1535: intrinsics::write_via_move(dst, src)
*** Verification unsuccessful.
Number of complete executions explored: 0
Number of blocked executions seen: 1
Total wall-clock time: 3.48s
